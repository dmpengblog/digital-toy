C51 COMPILER V8.01   MAIN                                                                  06/08/2010 21:49:00 PAGE 1   


C51 COMPILER V8.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c ROM(COMPACT) WARNINGLEVEL(1) OPTIMIZE(5,SIZE) INCDIR(.;.\driver)

line level    source

   1          #include "config.h"
   2          #include <adc.h>
   3          #include <pwm.h>
   4          
   5          #include <adc0832.h>
   6          
   7          #include <charger.h>
   8          
   9          #include <1602.h>
  10          
  11          
  12          
  13          extern float  refV ; 
  14          char t=0;
  15          unsigned short i=0;
  16          
  17          //easy charging
  18          unsigned char duty=0, max_duty=11;
  19          float current=0, voltage=0;
  20          float vlimit = 7.0 ; //V
  21          float climit = 1.1 ; //A
  22          float ir = 0 ;  //battery internal resistor
  23          void easy_charging();
  24          
  25          char charging = 0;  //not incharging
  26          void isdone();
  27          
  28          //i_charger charger = INIT_CHARGER;
  29          
  30          
  31          void io_init()
  32          {
  33   1         pwm_init(); //pull down pwm
  34   1         lcd1602_init();
  35   1          lcd_cursor(0,0);
  36   1         lcd_puts("Welcom!");
  37   1         seg_init();
  38   1         mdelay(100);
  39   1       
  40   1      }
  41          void main()
  42          {
  43   1         unsigned short n,loop=0;
  44   1         unsigned short mode=0;
  45   1         float adc;
  46   1      
  47   1      
  48   1         io_init();
  49   1                 
  50   1         timer0_init(); //pwm
  51   1        // timer1_init();
  52   1      
  53   1         //adc_init(); 
  54   1         irqon();   //enable global interrupt         
  55   1         sleep(0); // just refrence 
C51 COMPILER V8.01   MAIN                                                                  06/08/2010 21:49:00 PAGE 2   

  56   1         while(1){
  57   2         
  58   2      // KEY_FUNC P3_3  KEY_DISCHARGER  P3_2  KEY_RESUME    P3_1  
  59   2      
  60   2         modeloop:
  61   2          loop++;
  62   2         if(1000==loop&&mode==0) goto motor_charging;
  63   2          
  64   2         if(0==mode){
  65   3            lcd_cursor(0,0);
  66   3            lcd_puts("mode     ");        
  67   3              }
  68   2           if(key(KEY_OK)){
  69   3               motor_charging:
  70   3                      vlimit = 6.9;
  71   3                  climit = 1.2;
  72   3                      mode=1;
  73   3                      lcd_puts("6.9V");
  74   3               }
  75   2                 
  76   2      
  77   2               if(key(KEY_DIS)){
  78   3               
  79   3                       vlimit = 1.4*3;
  80   3                   climit = 0.8;
  81   3                       mode=1;
  82   3                       lcd_puts("4.2V");
  83   3                }
  84   2      
  85   2               if(key(KEY_RES)) {
  86   3                 vlimit = 1.4*4;
  87   3                 climit = 0.8;
  88   3                 mode=1;
  89   3                 lcd_puts("5.6V");
  90   3               }
  91   2           
  92   2         
  93   2              if(0==mode) goto modeloop;   
  94   2              else{
  95   3                lcd_puts("."); 
  96   3              } 
  97   2          
  98   2      
  99   2                voltage=adc_V();
 100   2            lcd_cursor(0,0);
 101   2            lcd_puts("V: ");
 102   2                showVA(voltage*100);
 103   2      
 104   2                current=adc_A();
 105   2                lcd_cursor(0,1);
 106   2            lcd_puts("A: ");
 107   2                showVA(current*100);
 108   2                
 109   2                lcd_puts(" pwm:");
 110   2                print10(duty);
 111   2      
 112   2              /*charging core*/
 113   2               isdone();
 114   2                easy_charging();
 115   2               
 116   2         /*end charging*/     
 117   2                
C51 COMPILER V8.01   MAIN                                                                  06/08/2010 21:49:00 PAGE 3   

 118   2         }
 119   1        
 120   1        
 121   1      }
 122          
 123          adj_c()
 124          {
 125   1      
 126   1        char  i=0;
 127   1      
 128   1         for( i=1;i<max_duty;i++){
 129   2           current=adc_A();    
 130   2           if(current < climit){
 131   3              duty+=1;
 132   3                 if(duty>max_duty)
 133   3                     duty=max_duty;
 134   3      
 135   3           }
 136   2           
 137   2           if(current > climit){
 138   3              if(duty>0)
 139   3                       duty-=1;
 140   3                  if(duty==0)
 141   3                     duty=1;
 142   3          }
 143   2      
 144   2               pwm_setduty(duty);
 145   2               current=adc_A();
 146   2               voltage=adc_V();
 147   2                        voltage=adc_V();
 148   2            lcd_cursor(0,0);
 149   2            lcd_puts("V: ");
 150   2                showVA(voltage*100);
 151   2      
 152   2                current=adc_A();
 153   2                lcd_cursor(0,1);
 154   2            lcd_puts("A: ");
 155   2                showVA(current*100);
 156   2         }  
 157   1      
 158   1      }
 159          void isdone()
 160          {
 161   1          float bv=0;
 162   1        
 163   1         if(voltage < 0.5 || voltage>8.0) /*no battery or pull out*/
 164   1            charging = 0;
 165   1      
 166   1          if(1==charging) return; /*in charging*/
 167   1      
 168   1          /*try new charging */
 169   1          /*para*/
 170   1      
 171   1      
 172   1          /*test battery*/
 173   1           pwm_setduty(0);
 174   1               mdelay(100);
 175   1           bv=voltage=adc_V();        
 176   1           if(voltage> 3)
 177   1                  charging = 1;
 178   1      
 179   1               if(0==charging) /*no battery*/
C51 COMPILER V8.01   MAIN                                                                  06/08/2010 21:49:00 PAGE 4   

 180   1                  return;
 181   1      
 182   1              /*test internal resistor*/
 183   1          pwm_setduty(5);
 184   1              mdelay(100);
 185   1              mdelay(100);
 186   1                current=adc_A();
 187   1                voltage=adc_V();
 188   1                        voltage=adc_V();
 189   1            lcd_cursor(0,0);
 190   1            lcd_puts("V: ");
 191   1                showVA(voltage*100);
 192   1      
 193   1                current=adc_A();
 194   1                lcd_cursor(0,1);
 195   1            lcd_puts("A: ");
 196   1                showVA(current*100);
 197   1      
 198   1              pwm_setduty(0);
 199   1              ir = (voltage-bv)/current;
 200   1          
 201   1              lcd_cursor(9,0);
 202   1          lcd_puts("ir:");
 203   1              print10(1000*ir);
 204   1      
 205   1              if(ir>1.5) {
 206   2                 lcd_cursor(9,0) ;
 207   2                 mdelay(100); mdelay(100);    mdelay(100);
 208   2             mdelay(100);     mdelay(100);
 209   2             lcd_puts("bad ir  ");
 210   2              }
 211   1                 
 212   1              /*set parameter */
 213   1      
 214   1           /*init start*/
 215   1           pwm_setduty(1);
 216   1               mdelay(100);mdelay(100);
 217   1               mdelay(100);mdelay(100);
 218   1               current=adc_A();
 219   1               voltage=adc_V();
 220   1               duty=1;
 221   1                  /*adjust the current*/
 222   1      
 223   1               adj_c();
 224   1      
 225   1      }
 226          
 227          void easy_charging()
 228          {
 229   1         if(!charging) return;
 230   1      
 231   1         if(duty==0) goto done; /*already complete charging*/
 232   1        
 233   1      
 234   1      
 235   1         
 236   1      
 237   1         /*ending test*/
 238   1         if(current <0.100) /*drop to 50mA, so done*/
 239   1             goto done;
 240   1      
 241   1         if( voltage > (vlimit+ir*current)){
C51 COMPILER V8.01   MAIN                                                                  06/08/2010 21:49:00 PAGE 5   

 242   2                 if(duty>0)
 243   2                      duty-=1;
 244   2                 if(duty==0)
 245   2                    goto done;
 246   2         
 247   2         }
 248   1          
 249   1         pwm_setduty(duty);     
 250   1              
 251   1            
 252   1      
 253   1         return;
 254   1      /* complete the charging */
 255   1         done:
 256   1         {
 257   2            duty=0;
 258   2            pwm_setduty(duty);
 259   2      
 260   2                bl_off();
 261   2            mdelay(55);
 262   2                bl_on();
 263   2                mdelay(55);
 264   2                bl_off();
 265   2            mdelay(55);
 266   2                bl_on();
 267   2                mdelay(55);
 268   2                bl_off();
 269   2            mdelay(55);
 270   2                bl_on();
 271   2                mdelay(55);
 272   2                
 273   2         }
 274   1      
 275   1      
 276   1      }
 277          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1233    ----
   CONSTANT SIZE    =     62    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
