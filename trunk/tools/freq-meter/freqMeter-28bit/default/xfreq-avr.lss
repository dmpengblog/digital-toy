
xfreq-avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001678  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001678  0000170c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080008a  0080008a  00001736  2**0
                  ALLOC
  3 .noinit       00000000  008000a3  008000a3  00001736  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001736  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000000a0  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000002d7  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000cc8  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000694  00000000  00000000  00002b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000bfb  00000000  00000000  000031fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000003c0  00000000  00000000  00003df6  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
       4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
       6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
       8:	ae c0       	rjmp	.+348    	; 0x166 <__vector_4>
       a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
       c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
       e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
      10:	8a c0       	rjmp	.+276    	; 0x126 <__vector_8>
      12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
      14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
      16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
      18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
      1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
      1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
      1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
      20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
      22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
      24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 e7       	ldi	r30, 0x78	; 120
      3a:	f6 e1       	ldi	r31, 0x16	; 22
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	aa 38       	cpi	r26, 0x8A	; 138
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	10 e0       	ldi	r17, 0x00	; 0
      4a:	aa e8       	ldi	r26, 0x8A	; 138
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a3 3a       	cpi	r26, 0xA3	; 163
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	56 c2       	rjmp	.+1196   	; 0x506 <main>

0000005a <__bad_interrupt>:
      5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <read_411>:

unsigned char read_411()
{
	unsigned char add=0;
	unsigned char i=0;
      5c:	f0 e0       	ldi	r31, 0x00	; 0


	_clear_bit(PORTC,SH_165); //recept parallen load data
	_delay_us(10);
      5e:	a8 98       	cbi	0x15, 0	; 21
		__ticks = 1;
	else if (__tmp > 255)
		__ticks = 0;	/* i.e. 256 */
	else
		__ticks = (uint8_t)__tmp;
      60:	81 e2       	ldi	r24, 0x21	; 33
      62:	8a 95       	dec	r24
      64:	f1 f7       	brne	.-4      	; 0x62 <read_411+0x6>
	_set_bit(PORTC,SH_165);  //lock it
	_delay_ms(1);
      66:	a8 9a       	sbi	0x15, 0	; 21
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
      68:	84 ec       	ldi	r24, 0xC4	; 196
      6a:	99 e0       	ldi	r25, 0x09	; 9
      6c:	01 97       	sbiw	r24, 0x01	; 1
      6e:	f1 f7       	brne	.-4      	; 0x6c <read_411+0x10>

  	
	_clear_bit(HC165_PORT,CLK_165);
	for (i=0;i<8;i++)
      70:	a9 98       	cbi	0x15, 1	; 21
      72:	a1 e0       	ldi	r26, 0x01	; 1
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	27 e1       	ldi	r18, 0x17	; 23
      78:	30 e0       	ldi	r19, 0x00	; 0
      7a:	40 e0       	ldi	r20, 0x00	; 0
      7c:	50 e0       	ldi	r21, 0x00	; 0
      7e:	67 e0       	ldi	r22, 0x07	; 7
      80:	70 e0       	ldi	r23, 0x00	; 0
      82:	e7 e0       	ldi	r30, 0x07	; 7
	{
		if(_test_bit(_inb(HC165_PORT),SO_165))
   			_set_bit(add,7-i); //上电后QH的值即是165的第8位值，可以直接赋值完后，给165上升沿读取下个数据
      84:	9a 9b       	sbis	0x13, 2	; 19
      86:	08 c0       	rjmp	.+16     	; 0x98 <read_411+0x3c>
   		
      88:	cd 01       	movw	r24, r26
      8a:	06 2e       	mov	r0, r22
      8c:	02 c0       	rjmp	.+4      	; 0x92 <read_411+0x36>
      8e:	88 0f       	add	r24, r24
      90:	99 1f       	adc	r25, r25
      92:	0a 94       	dec	r0
      94:	e2 f7       	brpl	.-8      	; 0x8e <read_411+0x32>
      96:	f8 2b       	or	r31, r24
		_clear_bit(HC165_PORT,CLK_165);
		_delay_us(7);
      98:	a9 98       	cbi	0x15, 1	; 21
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      9a:	82 2f       	mov	r24, r18
      9c:	8a 95       	dec	r24
      9e:	f1 f7       	brne	.-4      	; 0x9c <read_411+0x40>
		_set_bit(HC165_PORT,CLK_165);
		_delay_us(7);
      a0:	a9 9a       	sbi	0x15, 1	; 21
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      a2:	82 2f       	mov	r24, r18
      a4:	8a 95       	dec	r24
      a6:	f1 f7       	brne	.-4      	; 0xa4 <read_411+0x48>
      a8:	e1 50       	subi	r30, 0x01	; 1
      aa:	61 50       	subi	r22, 0x01	; 1
      ac:	70 40       	sbci	r23, 0x00	; 0
      ae:	e7 ff       	sbrs	r30, 7
      b0:	e9 cf       	rjmp	.-46     	; 0x84 <read_411+0x28>
		
	}
	return add;
}

      b2:	8f 2f       	mov	r24, r31
      b4:	99 27       	eor	r25, r25
      b6:	08 95       	ret

000000b8 <counter_init>:
void counter_init()
{

  //PD6/PD7  output, 161/393 control
  _pins_mode(PORTD,PD6,PD7,OUTPUT);
  _pins_mode(PORTD,PD4,PD4,OUTPUT);
      b8:	27 e0       	ldi	r18, 0x07	; 7
      ba:	46 e0       	ldi	r20, 0x06	; 6
      bc:	61 e0       	ldi	r22, 0x01	; 1
      be:	82 e3       	ldi	r24, 0x32	; 50
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	29 d2       	rcall	.+1106   	; 0x516 <__port_mode>
  
      c4:	24 e0       	ldi	r18, 0x04	; 4
      c6:	42 2f       	mov	r20, r18
      c8:	61 e0       	ldi	r22, 0x01	; 1
      ca:	82 e3       	ldi	r24, 0x32	; 50
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	23 d2       	rcall	.+1094   	; 0x516 <__port_mode>
  //PD0-PD3 161 data in
  _pins_mode(PORTD, 0,PD3,INPUT);
  _pins_pullup(PORTD,0,PD3,FLOAT);
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	64 2f       	mov	r22, r20
      d6:	82 e3       	ldi	r24, 0x32	; 50
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	1d d2       	rcall	.+1082   	; 0x516 <__port_mode>
  
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	64 2f       	mov	r22, r20
      e2:	82 e3       	ldi	r24, 0x32	; 50
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	51 d2       	rcall	.+1186   	; 0x58a <__port_pullup>

  //PC0, 1,2
  // PORTC=0xFF;
  _pins_mode(HC165_PORT,PC0,PC1,OUTPUT);
  _pins_mode(HC165_PORT,PC2,PC2,INPUT);
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	40 e0       	ldi	r20, 0x00	; 0
      ec:	62 2f       	mov	r22, r18
      ee:	85 e3       	ldi	r24, 0x35	; 53
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	11 d2       	rcall	.+1058   	; 0x516 <__port_mode>
  _pins_pullup(HC165_PORT,PC2,PC2,FLOAT);
      f4:	22 e0       	ldi	r18, 0x02	; 2
      f6:	42 2f       	mov	r20, r18
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	85 e3       	ldi	r24, 0x35	; 53
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0b d2       	rcall	.+1046   	; 0x516 <__port_mode>
  
     100:	22 e0       	ldi	r18, 0x02	; 2
     102:	42 2f       	mov	r20, r18
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	85 e3       	ldi	r24, 0x35	; 53
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	3f d2       	rcall	.+1150   	; 0x58a <__port_pullup>

  //T1 input init
  _pins_mode(PORTD, 0,PIND5,INPUT);
  _pins_pullup(PORTD,0,PIND5,FLOAT);
     10c:	25 e0       	ldi	r18, 0x05	; 5
     10e:	40 e0       	ldi	r20, 0x00	; 0
     110:	64 2f       	mov	r22, r20
     112:	82 e3       	ldi	r24, 0x32	; 50
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	ff d1       	rcall	.+1022   	; 0x516 <__port_mode>

     118:	25 e0       	ldi	r18, 0x05	; 5
     11a:	40 e0       	ldi	r20, 0x00	; 0
     11c:	64 2f       	mov	r22, r20
     11e:	82 e3       	ldi	r24, 0x32	; 50
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	33 d2       	rcall	.+1126   	; 0x58a <__port_pullup>
     124:	08 95       	ret

00000126 <__vector_8>:
  //ADC init  
  //_pins_mode(PORTC, PINC0,PINC1,INPUT);
  //_pins_pullup(PORTC, PINC0,PINC1,FLOAT);
  //adc_init();

}



#define factor (1.19) //Time base for 10 Mhz CLK, calibrate this value
#define cal   (1+0.001831348)

unsigned char T1_ovc=0; //Store the number of overflows of COUNTER1
volatile unsigned long frequency; //the last calculated frequency is stored here



//Atemel external clock source MAX< F_CPU/2.5, 8M/2.5=3.2M


//T1 conter the prescale output
SIGNAL(SIG_OVERFLOW1) 
{
	T1_ovc++;
}


//Timer/Counter 2 is configured as timer with a 1024 prescaller (counting CPU frequency divided by 1024). 
//It is used to call the "frequency calculation and selection algorithm" every timer period T.
//T is defined as "1024*256/(F_cpu)". (30.5Hz)
//ISR(TIMER0_OVF_vect)
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	8f 93       	push	r24
unsigned char sTCNT1L, sTCNT1H, sT1_ovc;
unsigned long scounter;
     132:	80 91 8f 00 	lds	r24, 0x008F
     136:	8f 5f       	subi	r24, 0xFF	; 255
     138:	80 93 8f 00 	sts	0x008F, r24
     13c:	8f 91       	pop	r24
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	0f 90       	pop	r0
     144:	1f 90       	pop	r1
     146:	18 95       	reti

00000148 <reset>:
unsigned char T2_ovc=0; 



void reset()
{

   reset_161();
   reset_393();
   //RESET COUNTERS
   T1_ovc = 0;
   TCNT1H = 0;
   barrier();
   TCNT1L = 0;
   TCNT1 = 0;
}
void start()
{
     148:	97 98       	cbi	0x12, 7	; 18
  //sti_t1();
     14a:	94 9a       	sbi	0x12, 4	; 18
  enable_393();
  enable_161();
  start_c();
     14c:	10 92 8f 00 	sts	0x008F, r1
}
void stop()
     150:	1d bc       	out	0x2d, r1	; 45
{
   stop_c();
}
     152:	1c bc       	out	0x2c, r1	; 44

     154:	1d bc       	out	0x2d, r1	; 45
     156:	1c bc       	out	0x2c, r1	; 44
     158:	08 95       	ret

0000015a <start>:

SIGNAL(SIG_OVERFLOW2) 
{
 
	jiffers++;
     15a:	94 98       	cbi	0x12, 4	; 18
    T2_ovc++;
     15c:	97 9a       	sbi	0x12, 7	; 18
	if((T2_ovc&0x1F)!=0)  //adc confict with freq counter, so if there is 0xF, show 000000HZ, but with 0x7, 0x3ok, so wired....
     15e:	96 9a       	sbi	0x12, 6	; 18
     160:	08 95       	ret

00000162 <stop>:
		return;		
	
	stop();

     162:	96 98       	cbi	0x12, 6	; 18
     164:	08 95       	ret

00000166 <__vector_4>:
	//timer 2 overflow: measure frequency
	frequency =  (unsigned long)read_03(); //4bit
	frequency |= ((unsigned long)read_411())<<4;
    frequency |= ((unsigned long)TCNT1)<<12;
    frequency |= ((unsigned long)T1_ovc)<<28;
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	4f 93       	push	r20
     176:	5f 93       	push	r21
     178:	6f 93       	push	r22
     17a:	7f 93       	push	r23
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	af 93       	push	r26
     182:	bf 93       	push	r27
     184:	ef 93       	push	r30
     186:	ff 93       	push	r31

   	//if use around 1s sample, no filter is needed, it's accuracy and stable if time is long..	
     188:	80 91 92 00 	lds	r24, 0x0092
     18c:	90 91 93 00 	lds	r25, 0x0093
     190:	a0 91 94 00 	lds	r26, 0x0094
     194:	b0 91 95 00 	lds	r27, 0x0095
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	a1 1d       	adc	r26, r1
     19c:	b1 1d       	adc	r27, r1
     19e:	80 93 92 00 	sts	0x0092, r24
     1a2:	90 93 93 00 	sts	0x0093, r25
     1a6:	a0 93 94 00 	sts	0x0094, r26
     1aa:	b0 93 95 00 	sts	0x0095, r27
	
     1ae:	80 91 8e 00 	lds	r24, 0x008E
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	80 93 8e 00 	sts	0x008E, r24
	frequency =  (unsigned long)((float)frequency*factor*cal);
     1b8:	99 27       	eor	r25, r25
     1ba:	8f 71       	andi	r24, 0x1F	; 31
     1bc:	90 70       	andi	r25, 0x00	; 0
     1be:	89 2b       	or	r24, r25
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <__vector_4+0x5e>
     1c2:	b7 c0       	rjmp	.+366    	; 0x332 <__vector_4+0x1cc>
	

    reset();
     1c4:	ce df       	rcall	.-100    	; 0x162 <stop>

	TCNT2= 0;
	start();

     1c6:	80 b3       	in	r24, 0x10	; 16
     1c8:	99 27       	eor	r25, r25
     1ca:	aa 27       	eor	r26, r26
     1cc:	bb 27       	eor	r27, r27
     1ce:	8f 70       	andi	r24, 0x0F	; 15
     1d0:	90 70       	andi	r25, 0x00	; 0
     1d2:	a0 70       	andi	r26, 0x00	; 0
     1d4:	b0 70       	andi	r27, 0x00	; 0
     1d6:	80 93 96 00 	sts	0x0096, r24
     1da:	90 93 97 00 	sts	0x0097, r25
     1de:	a0 93 98 00 	sts	0x0098, r26
     1e2:	b0 93 99 00 	sts	0x0099, r27

     1e6:	3a df       	rcall	.-396    	; 0x5c <read_411>
     1e8:	28 2f       	mov	r18, r24
     1ea:	33 27       	eor	r19, r19
     1ec:	44 27       	eor	r20, r20
     1ee:	55 27       	eor	r21, r21
     1f0:	68 94       	set
     1f2:	13 f8       	bld	r1, 3
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	44 1f       	adc	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	16 94       	lsr	r1
     1fe:	d1 f7       	brne	.-12     	; 0x1f4 <__vector_4+0x8e>
     200:	80 91 96 00 	lds	r24, 0x0096
     204:	90 91 97 00 	lds	r25, 0x0097
     208:	a0 91 98 00 	lds	r26, 0x0098
     20c:	b0 91 99 00 	lds	r27, 0x0099
     210:	82 2b       	or	r24, r18
     212:	93 2b       	or	r25, r19
     214:	a4 2b       	or	r26, r20
     216:	b5 2b       	or	r27, r21
     218:	80 93 96 00 	sts	0x0096, r24
     21c:	90 93 97 00 	sts	0x0097, r25
     220:	a0 93 98 00 	sts	0x0098, r26
     224:	b0 93 99 00 	sts	0x0099, r27
}
     228:	8c b5       	in	r24, 0x2c	; 44
     22a:	9d b5       	in	r25, 0x2d	; 45
     22c:	9c 01       	movw	r18, r24
     22e:	44 27       	eor	r20, r20
     230:	55 27       	eor	r21, r21
     232:	01 2e       	mov	r0, r17
     234:	1c e0       	ldi	r17, 0x0C	; 12
     236:	22 0f       	add	r18, r18
     238:	33 1f       	adc	r19, r19
     23a:	44 1f       	adc	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	1a 95       	dec	r17
     240:	d1 f7       	brne	.-12     	; 0x236 <__vector_4+0xd0>
     242:	10 2d       	mov	r17, r0
     244:	80 91 96 00 	lds	r24, 0x0096
     248:	90 91 97 00 	lds	r25, 0x0097
     24c:	a0 91 98 00 	lds	r26, 0x0098
     250:	b0 91 99 00 	lds	r27, 0x0099
     254:	82 2b       	or	r24, r18
     256:	93 2b       	or	r25, r19
     258:	a4 2b       	or	r26, r20
     25a:	b5 2b       	or	r27, r21
     25c:	80 93 96 00 	sts	0x0096, r24
     260:	90 93 97 00 	sts	0x0097, r25
     264:	a0 93 98 00 	sts	0x0098, r26
     268:	b0 93 99 00 	sts	0x0099, r27

     26c:	80 91 8f 00 	lds	r24, 0x008F
     270:	28 2f       	mov	r18, r24
     272:	33 27       	eor	r19, r19
     274:	44 27       	eor	r20, r20
     276:	55 27       	eor	r21, r21
     278:	7c e1       	ldi	r23, 0x1C	; 28
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	44 1f       	adc	r20, r20
     280:	55 1f       	adc	r21, r21
     282:	7a 95       	dec	r23
     284:	d1 f7       	brne	.-12     	; 0x27a <__vector_4+0x114>
     286:	80 91 96 00 	lds	r24, 0x0096
     28a:	90 91 97 00 	lds	r25, 0x0097
     28e:	a0 91 98 00 	lds	r26, 0x0098
     292:	b0 91 99 00 	lds	r27, 0x0099
     296:	82 2b       	or	r24, r18
     298:	93 2b       	or	r25, r19
     29a:	a4 2b       	or	r26, r20
     29c:	b5 2b       	or	r27, r21
     29e:	80 93 96 00 	sts	0x0096, r24
     2a2:	90 93 97 00 	sts	0x0097, r25
     2a6:	a0 93 98 00 	sts	0x0098, r26
     2aa:	b0 93 99 00 	sts	0x0099, r27





unsigned int vc=0, vl=0; //simple filter
     2ae:	20 91 96 00 	lds	r18, 0x0096
     2b2:	30 91 97 00 	lds	r19, 0x0097
     2b6:	40 91 98 00 	lds	r20, 0x0098
     2ba:	50 91 99 00 	lds	r21, 0x0099
     2be:	57 fd       	sbrc	r21, 7
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <__vector_4+0x164>
     2c2:	ca 01       	movw	r24, r20
     2c4:	b9 01       	movw	r22, r18
     2c6:	e8 d6       	rcall	.+3536   	; 0x1098 <__floatsisf>
     2c8:	14 c0       	rjmp	.+40     	; 0x2f2 <__vector_4+0x18c>
     2ca:	da 01       	movw	r26, r20
     2cc:	c9 01       	movw	r24, r18
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	90 70       	andi	r25, 0x00	; 0
     2d2:	a0 70       	andi	r26, 0x00	; 0
     2d4:	b0 70       	andi	r27, 0x00	; 0
     2d6:	56 95       	lsr	r21
     2d8:	47 95       	ror	r20
     2da:	37 95       	ror	r19
     2dc:	27 95       	ror	r18
     2de:	82 2b       	or	r24, r18
     2e0:	93 2b       	or	r25, r19
     2e2:	a4 2b       	or	r26, r20
     2e4:	b5 2b       	or	r27, r21
     2e6:	bc 01       	movw	r22, r24
     2e8:	cd 01       	movw	r24, r26
     2ea:	d6 d6       	rcall	.+3500   	; 0x1098 <__floatsisf>
     2ec:	9b 01       	movw	r18, r22
     2ee:	ac 01       	movw	r20, r24
     2f0:	32 d5       	rcall	.+2660   	; 0xd56 <__addsf3>
     2f2:	2c ee       	ldi	r18, 0xEC	; 236
     2f4:	31 e5       	ldi	r19, 0x51	; 81
     2f6:	48 e9       	ldi	r20, 0x98	; 152
     2f8:	5f e3       	ldi	r21, 0x3F	; 63
     2fa:	87 d5       	rcall	.+2830   	; 0xe0a <__mulsf3>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	22 e0       	ldi	r18, 0x02	; 2
     302:	3c e3       	ldi	r19, 0x3C	; 60
     304:	40 e8       	ldi	r20, 0x80	; 128
     306:	5f e3       	ldi	r21, 0x3F	; 63
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	7e d5       	rcall	.+2812   	; 0xe0a <__mulsf3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	bc 01       	movw	r22, r24
     314:	cd 01       	movw	r24, r26
     316:	d7 d3       	rcall	.+1966   	; 0xac6 <__fixunssfsi>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	80 93 96 00 	sts	0x0096, r24
     320:	90 93 97 00 	sts	0x0097, r25
     324:	a0 93 98 00 	sts	0x0098, r26
     328:	b0 93 99 00 	sts	0x0099, r27
unsigned long v_filter()
{
	return _adc(0);

	if(vl==0){
     32c:	0d df       	rcall	.-486    	; 0x148 <reset>
		vl=vc=_adc(0);
		return vc;
     32e:	14 bc       	out	0x24, r1	; 36
	}else{
     330:	14 df       	rcall	.-472    	; 0x15a <start>
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	bf 91       	pop	r27
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <v_filter>:
		vc = _adc(0);
		vc=(unsigned long)(0.88*(float)vc+0.12*(float)vl);
		vl=vc;
	}
}

void post_display(long number)
{
	static char xx=0;
  number = frequency;
	lcd_cursor(0,0);
    //lcd_puts("              ");
	lcd_cursor(0,0);
    
	if((number>999)&&(number<999999)){
	   printLL(number,3,3);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	58 d1       	rcall	.+688    	; 0x608 <_adc>
     358:	aa 27       	eor	r26, r26
     35a:	bb 27       	eor	r27, r27
	   lcd_puts("KHz");
	    lcd_putc(xx);
	    xx++;
     	lcd_puts("      ");

	}

    if(number>999999){
	   printLL(number,6,4); //omit xxHz
	   lcd_puts("MHz");
     35c:	bc 01       	movw	r22, r24
     35e:	cd 01       	movw	r24, r26
     360:	08 95       	ret

00000362 <post_display>:
	    lcd_putc(xx);
	    xx++;
       lcd_puts("     ");

     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
   	
	}
     36a:	e0 90 96 00 	lds	r14, 0x0096
     36e:	f0 90 97 00 	lds	r15, 0x0097
     372:	00 91 98 00 	lds	r16, 0x0098
     376:	10 91 99 00 	lds	r17, 0x0099
	if(number<=999)
	{
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	cb 01       	movw	r24, r22
     380:	00 d2       	rcall	.+1024   	; 0x782 <lcd_cursor>
	
	   printLL(number,0,0);
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	cb 01       	movw	r24, r22
     388:	fc d1       	rcall	.+1016   	; 0x782 <lcd_cursor>
	   lcd_puts("Hz");
	   lcd_putc(xx);
     38a:	d8 01       	movw	r26, r16
     38c:	c7 01       	movw	r24, r14
     38e:	88 5e       	subi	r24, 0xE8	; 232
     390:	93 40       	sbci	r25, 0x03	; 3
     392:	a0 40       	sbci	r26, 0x00	; 0
     394:	b0 40       	sbci	r27, 0x00	; 0
     396:	87 55       	subi	r24, 0x57	; 87
     398:	9e 43       	sbci	r25, 0x3E	; 62
     39a:	af 40       	sbci	r26, 0x0F	; 15
     39c:	b0 40       	sbci	r27, 0x00	; 0
     39e:	98 f4       	brcc	.+38     	; 0x3c6 <post_display+0x64>
	    xx++;
     3a0:	23 e0       	ldi	r18, 0x03	; 3
     3a2:	42 2f       	mov	r20, r18
     3a4:	c8 01       	movw	r24, r16
     3a6:	b7 01       	movw	r22, r14
     3a8:	9a d2       	rcall	.+1332   	; 0x8de <printLL>
     	lcd_puts("        ");
     3aa:	80 e6       	ldi	r24, 0x60	; 96
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	f5 d1       	rcall	.+1002   	; 0x79a <lcd_puts>
	
     3b0:	80 91 90 00 	lds	r24, 0x0090
     3b4:	07 d2       	rcall	.+1038   	; 0x7c4 <lcd_putc>
   	
     3b6:	80 91 90 00 	lds	r24, 0x0090
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	80 93 90 00 	sts	0x0090, r24
	}
     3c0:	84 e6       	ldi	r24, 0x64	; 100
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	ea d1       	rcall	.+980    	; 0x79a <lcd_puts>

	lcd_cursor(0,1);
#if 0	//don't enable adc, adc confilic with the freqmeter...., OOOOPs

     3c6:	80 e4       	ldi	r24, 0x40	; 64
     3c8:	e8 16       	cp	r14, r24
     3ca:	82 e4       	ldi	r24, 0x42	; 66
     3cc:	f8 06       	cpc	r15, r24
     3ce:	8f e0       	ldi	r24, 0x0F	; 15
     3d0:	08 07       	cpc	r16, r24
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	18 07       	cpc	r17, r24
     3d6:	9c f0       	brlt	.+38     	; 0x3fe <post_display+0x9c>
	{
     3d8:	24 e0       	ldi	r18, 0x04	; 4
     3da:	46 e0       	ldi	r20, 0x06	; 6
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	7e d2       	rcall	.+1276   	; 0x8de <printLL>
    	static unsigned char ch=0;
     3e2:	8b e6       	ldi	r24, 0x6B	; 107
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	d9 d1       	rcall	.+946    	; 0x79a <lcd_puts>
		unsigned int adc= v_filter(ch);
     3e8:	80 91 90 00 	lds	r24, 0x0090
     3ec:	eb d1       	rcall	.+982    	; 0x7c4 <lcd_putc>
		float v, i;
     3ee:	80 91 90 00 	lds	r24, 0x0090
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	80 93 90 00 	sts	0x0090, r24

     3f8:	8f e6       	ldi	r24, 0x6F	; 111
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	ce d1       	rcall	.+924    	; 0x79a <lcd_puts>
 		print10(adc); //
		lcd_puts(" ");

		v = ((float)adc/1023.0)*5.09; //ref volatage 5.09V
     3fe:	28 ee       	ldi	r18, 0xE8	; 232
     400:	e2 16       	cp	r14, r18
     402:	23 e0       	ldi	r18, 0x03	; 3
     404:	f2 06       	cpc	r15, r18
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	02 07       	cpc	r16, r18
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	12 07       	cpc	r17, r18
     40e:	9c f4       	brge	.+38     	; 0x436 <post_display+0xd4>
    	i = (v/50.00)/0.1; //amp 50x, 0.1R sample

    	print10(v*1000); //to mV
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	42 2f       	mov	r20, r18
     414:	c8 01       	movw	r24, r16
     416:	b7 01       	movw	r22, r14
     418:	62 d2       	rcall	.+1220   	; 0x8de <printLL>
		lcd_puts("mV ");
     41a:	85 e7       	ldi	r24, 0x75	; 117
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	bd d1       	rcall	.+890    	; 0x79a <lcd_puts>
    
     420:	80 91 90 00 	lds	r24, 0x0090
     424:	cf d1       	rcall	.+926    	; 0x7c4 <lcd_putc>
		print10(i*1000);
     426:	80 91 90 00 	lds	r24, 0x0090
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	80 93 90 00 	sts	0x0090, r24
		lcd_puts("mA");
     430:	88 e7       	ldi	r24, 0x78	; 120
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	b2 d1       	rcall	.+868    	; 0x79a <lcd_puts>
	
	}
#endif
 	print10(TCNT1L);
	lcd_putc(' ');
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	a1 d1       	rcall	.+834    	; 0x782 <lcd_cursor>
 	print10(TCNT1H);
    lcd_putc(' ');
 	print10(T1_ovc);

}

void setup_timers(){
	TCCR1A = 0x00; //Setup TC1 to count PD5/T1
	TCCR1B = 0x07; //TC1 up edge triger
	
	TCCR2 = 0x07;  //TC2 counts Clock_io/1024, use as time base caller 


}

void setup_interrupts()
{
	TIMSK =  _bits8(1,TOIE1,TOIE1)|_bits8(1,TOIE2,TOIE2);//enable timer 0,1,2 overflow intrrupt	

	//clear T1 counters
	T1_ovc = 0;

     440:	8c b5       	in	r24, 0x2c	; 44
     442:	99 27       	eor	r25, r25
     444:	22 d2       	rcall	.+1092   	; 0x88a <print10>
	TCNT1H = 0;
     446:	80 e2       	ldi	r24, 0x20	; 32
     448:	bd d1       	rcall	.+890    	; 0x7c4 <lcd_putc>
	barrier();
     44a:	8d b5       	in	r24, 0x2d	; 45
     44c:	99 27       	eor	r25, r25
     44e:	1d d2       	rcall	.+1082   	; 0x88a <print10>
	TCNT1L = 0;
     450:	80 e2       	ldi	r24, 0x20	; 32
     452:	b8 d1       	rcall	.+880    	; 0x7c4 <lcd_putc>
	TCNT1 = 0;
     454:	80 91 8f 00 	lds	r24, 0x008F
     458:	99 27       	eor	r25, r25
     45a:	17 d2       	rcall	.+1070   	; 0x88a <print10>
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	08 95       	ret

00000466 <setup_timers>:
	sti();
}






     466:	1f bc       	out	0x2f, r1	; 47
unsigned int display_refresh; //counter used for the refresh rate

     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	8e bd       	out	0x2e, r24	; 46
void freq_main(void) 
{
     46c:	85 bd       	out	0x25, r24	; 37
     46e:	08 95       	ret

00000470 <setup_interrupts>:

    
	cli();

	setup_timers();
	setup_interrupts();
	counter_init();

    stop();
    reset();
	start();
     470:	84 e4       	ldi	r24, 0x44	; 68
     472:	89 bf       	out	0x39, r24	; 57
	TCNT2= 0;


     474:	10 92 8f 00 	sts	0x008F, r1
 	//for testing
	display_refresh=jiffers;

     478:	1d bc       	out	0x2d, r1	; 45
   	while(1) {             // Infinite loop
	  	if (timeafter(jiffers,display_refresh+38/4)){
		   	display_refresh=jiffers;
     47a:	1c bc       	out	0x2c, r1	; 44
			post_display(frequency);
     47c:	1d bc       	out	0x2d, r1	; 45
     47e:	1c bc       	out	0x2c, r1	; 44
		}
     480:	78 94       	sei
     482:	08 95       	ret

00000484 <freq_main>:
	
	   
  	}

}
     484:	f8 94       	cli
     486:	ef df       	rcall	.-34     	; 0x466 <setup_timers>
     488:	f3 df       	rcall	.-26     	; 0x470 <setup_interrupts>
     48a:	16 de       	rcall	.-980    	; 0xb8 <counter_init>
     48c:	6a de       	rcall	.-812    	; 0x162 <stop>
     48e:	5c de       	rcall	.-840    	; 0x148 <reset>
     490:	64 de       	rcall	.-824    	; 0x15a <start>
     492:	14 bc       	out	0x24, r1	; 36
     494:	80 91 92 00 	lds	r24, 0x0092
     498:	90 91 93 00 	lds	r25, 0x0093
     49c:	a0 91 94 00 	lds	r26, 0x0094
     4a0:	b0 91 95 00 	lds	r27, 0x0095
     4a4:	90 93 9d 00 	sts	0x009D, r25
     4a8:	80 93 9c 00 	sts	0x009C, r24
     4ac:	80 91 9c 00 	lds	r24, 0x009C
     4b0:	90 91 9d 00 	lds	r25, 0x009D
     4b4:	09 96       	adiw	r24, 0x09	; 9
     4b6:	aa 27       	eor	r26, r26
     4b8:	bb 27       	eor	r27, r27
     4ba:	20 91 92 00 	lds	r18, 0x0092
     4be:	30 91 93 00 	lds	r19, 0x0093
     4c2:	40 91 94 00 	lds	r20, 0x0094
     4c6:	50 91 95 00 	lds	r21, 0x0095
     4ca:	82 1b       	sub	r24, r18
     4cc:	93 0b       	sbc	r25, r19
     4ce:	a4 0b       	sbc	r26, r20
     4d0:	b5 0b       	sbc	r27, r21
     4d2:	b7 ff       	sbrs	r27, 7
     4d4:	eb cf       	rjmp	.-42     	; 0x4ac <freq_main+0x28>
     4d6:	80 91 92 00 	lds	r24, 0x0092
     4da:	90 91 93 00 	lds	r25, 0x0093
     4de:	a0 91 94 00 	lds	r26, 0x0094
     4e2:	b0 91 95 00 	lds	r27, 0x0095
     4e6:	90 93 9d 00 	sts	0x009D, r25
     4ea:	80 93 9c 00 	sts	0x009C, r24
     4ee:	80 91 96 00 	lds	r24, 0x0096
     4f2:	90 91 97 00 	lds	r25, 0x0097
     4f6:	a0 91 98 00 	lds	r26, 0x0098
     4fa:	b0 91 99 00 	lds	r27, 0x0099
     4fe:	bc 01       	movw	r22, r24
     500:	cd 01       	movw	r24, r26
     502:	2f df       	rcall	.-418    	; 0x362 <post_display>
     504:	d3 cf       	rjmp	.-90     	; 0x4ac <freq_main+0x28>

00000506 <main>:
       5        10
*/

int main()
{
     506:	cf e5       	ldi	r28, 0x5F	; 95
     508:	d4 e0       	ldi	r29, 0x04	; 4
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	cd bf       	out	0x3d, r28	; 61

  	cli();
     50e:	f8 94       	cli
	lcd1602_init();
     510:	1d d1       	rcall	.+570    	; 0x74c <lcd1602_init>
	

      
	while(1){
		freq_main();
     512:	b8 df       	rcall	.-144    	; 0x484 <freq_main>
     514:	fe cf       	rjmp	.-4      	; 0x512 <main+0xc>

00000516 <__port_mode>:



void __port_mode(volatile unsigned char* port_addr, char mode, char n, char m)
{
     516:	72 2f       	mov	r23, r18
	if(INPUT == mode){
     518:	66 23       	and	r22, r22
     51a:	d9 f4       	brne	.+54     	; 0x552 <__port_mode+0x3c>
    	/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) &= ~(_MASK8(n,m));  /*enable input*/  
     51c:	fc 01       	movw	r30, r24
     51e:	31 97       	sbiw	r30, 0x01	; 1
     520:	2f ef       	ldi	r18, 0xFF	; 255
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	c9 01       	movw	r24, r18
     526:	02 c0       	rjmp	.+4      	; 0x52c <__port_mode+0x16>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	4a 95       	dec	r20
     52e:	e2 f7       	brpl	.-8      	; 0x528 <__port_mode+0x12>
     530:	ac 01       	movw	r20, r24
     532:	87 e0       	ldi	r24, 0x07	; 7
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	87 1b       	sub	r24, r23
     538:	91 09       	sbc	r25, r1
     53a:	02 c0       	rjmp	.+4      	; 0x540 <__port_mode+0x2a>
     53c:	35 95       	asr	r19
     53e:	27 95       	ror	r18
     540:	8a 95       	dec	r24
     542:	e2 f7       	brpl	.-8      	; 0x53c <__port_mode+0x26>
     544:	94 2f       	mov	r25, r20
     546:	92 23       	and	r25, r18
     548:	90 95       	com	r25
     54a:	80 81       	ld	r24, Z
     54c:	89 23       	and	r24, r25
     54e:	80 83       	st	Z, r24
     550:	08 95       	ret
    	/* PORT */  
		/*PULL UP enale lead to ADC always sample 1023...., close it here.*/
		//(*(volatile uint8_t *)port_addr) |= (_MASK8(n,m)) ; /*pull-up-enable*/  
	}else if(OUTPUT == mode){
     552:	61 30       	cpi	r22, 0x01	; 1
     554:	c9 f4       	brne	.+50     	; 0x588 <__port_mode+0x72>
		/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) |= _MASK8(n,m);  /*enable output*/  
     556:	fc 01       	movw	r30, r24
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	2f ef       	ldi	r18, 0xFF	; 255
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	c9 01       	movw	r24, r18
     560:	02 c0       	rjmp	.+4      	; 0x566 <__port_mode+0x50>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	4a 95       	dec	r20
     568:	e2 f7       	brpl	.-8      	; 0x562 <__port_mode+0x4c>
     56a:	ac 01       	movw	r20, r24
     56c:	87 e0       	ldi	r24, 0x07	; 7
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	87 1b       	sub	r24, r23
     572:	91 09       	sbc	r25, r1
     574:	02 c0       	rjmp	.+4      	; 0x57a <__port_mode+0x64>
     576:	35 95       	asr	r19
     578:	27 95       	ror	r18
     57a:	8a 95       	dec	r24
     57c:	e2 f7       	brpl	.-8      	; 0x576 <__port_mode+0x60>
     57e:	94 2f       	mov	r25, r20
     580:	92 23       	and	r25, r18
     582:	80 81       	ld	r24, Z
     584:	89 2b       	or	r24, r25
     586:	80 83       	st	Z, r24
     588:	08 95       	ret

0000058a <__port_pullup>:
   	}

    //panic();
	//DDRx &= ~(1<< DDx##n);  /*enable input*/   
	//PORTx |= (1<< PX##n)    /*pull-up-enable*/  
}


//pollup indicate the PIN mode is INPUT
void __port_pullup(volatile unsigned char* port_addr, char pullup, char n, char m)
{
     58a:	fc 01       	movw	r30, r24
     58c:	86 2f       	mov	r24, r22
     58e:	55 27       	eor	r21, r21
     590:	62 2f       	mov	r22, r18
     592:	77 27       	eor	r23, r23
	if(PULLUP == pullup){
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	a9 f4       	brne	.+42     	; 0x5c2 <__port_pullup+0x38>
       	/* PORT PULL UP */  
		(*(volatile uint8_t *)port_addr) |= (_MASK8(n,m)) ; /*pull-up-enable*/  
     598:	2f ef       	ldi	r18, 0xFF	; 255
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	c9 01       	movw	r24, r18
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__port_pullup+0x1a>
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	4a 95       	dec	r20
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <__port_pullup+0x16>
     5a8:	ac 01       	movw	r20, r24
     5aa:	87 e0       	ldi	r24, 0x07	; 7
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	86 1b       	sub	r24, r22
     5b0:	97 0b       	sbc	r25, r23
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <__port_pullup+0x2e>
     5b4:	35 95       	asr	r19
     5b6:	27 95       	ror	r18
     5b8:	8a 95       	dec	r24
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <__port_pullup+0x2a>
     5bc:	94 2f       	mov	r25, r20
     5be:	92 23       	and	r25, r18
     5c0:	15 c0       	rjmp	.+42     	; 0x5ec <__port_pullup+0x62>
	}else{
       	/* cancel PULL UP */  
		(*(volatile uint8_t *)port_addr) |= ~(_MASK8(n,m)) ; /*pull-up-enable*/  
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	c9 01       	movw	r24, r18
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <__port_pullup+0x44>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	4a 95       	dec	r20
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <__port_pullup+0x40>
     5d2:	ac 01       	movw	r20, r24
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	86 1b       	sub	r24, r22
     5da:	97 0b       	sbc	r25, r23
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__port_pullup+0x58>
     5de:	35 95       	asr	r19
     5e0:	27 95       	ror	r18
     5e2:	8a 95       	dec	r24
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <__port_pullup+0x54>
     5e6:	94 2f       	mov	r25, r20
     5e8:	92 23       	and	r25, r18
     5ea:	90 95       	com	r25
     5ec:	80 81       	ld	r24, Z
     5ee:	89 2b       	or	r24, r25
     5f0:	80 83       	st	Z, r24
     5f2:	08 95       	ret

000005f4 <adc_init>:
{
	short adc;

	/// AVCC, AREF 加滤波电容      ADCL keep low 8bit        init for ch0  
	ADMUX = _bits8(0b01,REFS0,REFS1) |   _bits8(0,ADLAR,ADLAR) |  _bits8(0,MUX0,MUX3); 
     5f4:	80 e4       	ldi	r24, 0x40	; 64
     5f6:	87 b9       	out	0x07, r24	; 7
        /*must READ ADCH for compled ADC*/

	/*ADC status and control*/   
	         /*enable ADC*/	  /*start first ADC*/    /*no interrupt for now*/ /*4M/32, 125kHz*/
	ADCSRA = _bits8(1,ADEN,ADEN) | _bits8(1,ADSC,ADSC) |  _bits8(0, ADIE,ADIE)   | _bits8(0b101, ADPS0,ADPS2);
     5f8:	85 ec       	ldi	r24, 0xC5	; 197
     5fa:	86 b9       	out	0x06, r24	; 6
       /*wait for 25 ADC clock for first ADC completed*/
	while(!_test_bit(ADCSRA,ADIF));
     5fc:	34 9b       	sbis	0x06, 4	; 6
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <adc_init+0x8>
	_set_bit(ADCSRA,ADIF); //clear IF bit
     600:	34 9a       	sbi	0x06, 4	; 6
  
    adc = ADCL;
     602:	84 b1       	in	r24, 0x04	; 4
	barrier();
	adc = ADCH;
     604:	85 b1       	in	r24, 0x05	; 5
     606:	08 95       	ret

00000608 <_adc>:
}



unsigned int _adc(unsigned char ch)
{
  unsigned int adc_l=0,adc=0;

  /*select channel*/
  _mov_bits8(ADMUX,ch,MUX0,MUX3,0,2); /*ADC0...ADC4*/
     608:	98 2f       	mov	r25, r24
     60a:	97 70       	andi	r25, 0x07	; 7
     60c:	87 b1       	in	r24, 0x07	; 7
     60e:	80 7f       	andi	r24, 0xF0	; 240
     610:	98 2b       	or	r25, r24
     612:	97 b9       	out	0x07, r25	; 7

  /*start ADC*/
  _set_bit(ADCSRA,ADSC);
     614:	36 9a       	sbi	0x06, 6	; 6

  /*wait completed(ADIF active)*/
   while(!_test_bit(ADCSRA,ADIF));
     616:	34 9b       	sbis	0x06, 4	; 6
     618:	fe cf       	rjmp	.-4      	; 0x616 <_adc+0xe>

  /*read result */
  /*must READ ADCH for compled ADC*/
   adc_l = ADCL;
     61a:	84 b1       	in	r24, 0x04	; 4
     61c:	28 2f       	mov	r18, r24
     61e:	33 27       	eor	r19, r19
   /* GCC will swich ADCL read fist,so tell it don't do that*/
   barrier();
   adc =   ADCH ;
     620:	85 b1       	in	r24, 0x05	; 5
     622:	99 27       	eor	r25, r25
   adc = (adc<<8)|adc_l;
     624:	98 2f       	mov	r25, r24
     626:	88 27       	eor	r24, r24

   _set_bit(ADCSRA,ADIF); //clear IF bit
     628:	34 9a       	sbi	0x06, 4	; 6
   return adc;
}
     62a:	82 2b       	or	r24, r18
     62c:	93 2b       	or	r25, r19
     62e:	08 95       	ret

00000630 <delay_io>:
		__ticks = 1;
	else if (__tmp > 255)
		__ticks = 0;	/* i.e. 256 */
	else
		__ticks = (uint8_t)__tmp;
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	8a 95       	dec	r24
     634:	f1 f7       	brne	.-4      	; 0x632 <delay_io+0x2>
     636:	08 95       	ret

00000638 <init_74hc595>:

void init_74hc595(void)
{
	_pins_mode(METAL_74HC595_PORT, (char)METAL_74HC595_SDI,(char)METAL_74HC595_CLK,(char)OUTPUT);
}
     638:	25 e0       	ldi	r18, 0x05	; 5
     63a:	43 e0       	ldi	r20, 0x03	; 3
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	88 e3       	ldi	r24, 0x38	; 56
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	69 df       	rcall	.-302    	; 0x516 <__port_mode>
     644:	08 95       	ret

00000646 <shiftout>:


void shiftout(unsigned char data)
{
	char i=0;
	for(i=0;i<8;i++){
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	08 2f       	mov	r16, r24
     650:	c0 e0       	ldi	r28, 0x00	; 0
     652:	d0 e0       	ldi	r29, 0x00	; 0
     654:	17 e0       	ldi	r17, 0x07	; 7
	   delay_io();
	  
	   if((data<<i)&0x80)
     656:	ec df       	rcall	.-40     	; 0x630 <delay_io>
	     _set_bit(METAL_74HC595_PORT, METAL_74HC595_SDI);
	   else
     658:	80 2f       	mov	r24, r16
     65a:	99 27       	eor	r25, r25
     65c:	0c 2e       	mov	r0, r28
     65e:	02 c0       	rjmp	.+4      	; 0x664 <shiftout+0x1e>
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <shiftout+0x1a>
     668:	87 ff       	sbrs	r24, 7
     66a:	02 c0       	rjmp	.+4      	; 0x670 <shiftout+0x2a>
	     _clear_bit(METAL_74HC595_PORT, METAL_74HC595_SDI);
     66c:	c3 9a       	sbi	0x18, 3	; 24
     66e:	01 c0       	rjmp	.+2      	; 0x672 <shiftout+0x2c>

	   delay_io();
     670:	c3 98       	cbi	0x18, 3	; 24
	  _set_bit(METAL_74HC595_PORT,METAL_74HC595_CLK); 
       delay_io();
     672:	de df       	rcall	.-68     	; 0x630 <delay_io>
	  _clear_bit(METAL_74HC595_PORT, METAL_74HC595_CLK);
     674:	c5 9a       	sbi	0x18, 5	; 24
	  		
     676:	dc df       	rcall	.-72     	; 0x630 <delay_io>
   }
     678:	c5 98       	cbi	0x18, 5	; 24
     67a:	11 50       	subi	r17, 0x01	; 1
     67c:	21 96       	adiw	r28, 0x01	; 1
     67e:	17 ff       	sbrs	r17, 7
     680:	ea cf       	rjmp	.-44     	; 0x656 <shiftout+0x10>
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <write_74hc595>:

}
void write_74hc595(unsigned char data)
{
	//_clear_bit(METAL_74HC595_PORT,CLK); //prepare send data
	delay_io();
     68c:	1f 93       	push	r17
     68e:	18 2f       	mov	r17, r24
      
	shiftout(data);
     690:	cf df       	rcall	.-98     	; 0x630 <delay_io>
    
	delay_io();
     692:	81 2f       	mov	r24, r17
     694:	d8 df       	rcall	.-80     	; 0x646 <shiftout>
    _set_bit(METAL_74HC595_PORT,METAL_74HC595_LATCH); //prepare open latch
     delay_io();
     696:	cc df       	rcall	.-104    	; 0x630 <delay_io>
	 delay_io();
     698:	c4 9a       	sbi	0x18, 4	; 24
     delay_io();
     69a:	ca df       	rcall	.-108    	; 0x630 <delay_io>
    _clear_bit(METAL_74HC595_PORT,METAL_74HC595_LATCH); //prepare open latch
     69c:	c9 df       	rcall	.-110    	; 0x630 <delay_io>
   
     69e:	c8 df       	rcall	.-112    	; 0x630 <delay_io>
}
     6a0:	c4 98       	cbi	0x18, 4	; 24
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <io_delay>:
		__ticks = 1;
	else if (__tmp > 255)
		__ticks = 0;	/* i.e. 256 */
	else
		__ticks = (uint8_t)__tmp;
     6a6:	82 e3       	ldi	r24, 0x32	; 50
     6a8:	8a 95       	dec	r24
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <io_delay+0x2>
     6ac:	08 95       	ret

000006ae <io_50ms>:
	_delay_loop_1(__ticks);
}


/**
   \ingroup util_delay

   Perform a delay of \c __ms milliseconds, using _delay_loop_2().

   The macro F_CPU is supposed to be defined to a
   constant defining the CPU clock frequency (in Hertz).

   The maximal possible delay is 262.14 ms / F_CPU in MHz.
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <io_50ms+0x4>
     6b6:	08 95       	ret

000006b8 <hd44870_send>:
   _delay_ms(50);
}

static void hd44870_send(unsigned char c, char is_cmd) 
{
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	c8 2f       	mov	r28, r24
     6be:	16 2f       	mov	r17, r22
  io_delay();
     6c0:	f2 df       	rcall	.-28     	; 0x6a6 <io_delay>
  
  bus4w &=~(_EN|_RW);       
     6c2:	80 91 91 00 	lds	r24, 0x0091
     6c6:	8f 7c       	andi	r24, 0xCF	; 207
     6c8:	80 93 91 00 	sts	0x0091, r24
  _rswe();
     6cc:	df df       	rcall	.-66     	; 0x68c <write_74hc595>
     6ce:	80 91 91 00 	lds	r24, 0x0091
  //io_delay();
  
  if(is_cmd)
     6d2:	11 23       	and	r17, r17
     6d4:	11 f0       	breq	.+4      	; 0x6da <hd44870_send+0x22>
  	 bus4w&=~_RS;  //RS=0，command
     6d6:	8f 7b       	andi	r24, 0xBF	; 191
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <hd44870_send+0x24>
  else
  	 bus4w|=_RS;  //RS=1, data
     6da:	80 64       	ori	r24, 0x40	; 64
     6dc:	80 93 91 00 	sts	0x0091, r24
  _rswe();
     6e0:	80 91 91 00 	lds	r24, 0x0091
     6e4:	d3 df       	rcall	.-90     	; 0x68c <write_74hc595>
  io_delay();
     6e6:	df df       	rcall	.-66     	; 0x6a6 <io_delay>
  
  /* 4 MSB*/
  bus4w &= ~(_DATA);    
     6e8:	80 91 91 00 	lds	r24, 0x0091
     6ec:	80 7f       	andi	r24, 0xF0	; 240
  bus4w |= (c>>4)&_DATA; 
     6ee:	9c 2f       	mov	r25, r28
     6f0:	92 95       	swap	r25
     6f2:	9f 70       	andi	r25, 0x0F	; 15
     6f4:	89 2b       	or	r24, r25
     6f6:	80 93 91 00 	sts	0x0091, r24
  _data();
     6fa:	c8 df       	rcall	.-112    	; 0x68c <write_74hc595>
  
  io_delay();
     6fc:	d4 df       	rcall	.-88     	; 0x6a6 <io_delay>
  bus4w |=_EN;  
     6fe:	80 91 91 00 	lds	r24, 0x0091
     702:	80 61       	ori	r24, 0x10	; 16
     704:	80 93 91 00 	sts	0x0091, r24
  _rswe();
     708:	c1 df       	rcall	.-126    	; 0x68c <write_74hc595>
  io_delay(); 
     70a:	cd df       	rcall	.-102    	; 0x6a6 <io_delay>
  bus4w &=~_EN;   
     70c:	80 91 91 00 	lds	r24, 0x0091
     710:	8f 7e       	andi	r24, 0xEF	; 239
     712:	80 93 91 00 	sts	0x0091, r24
  _rswe();
     716:	ba df       	rcall	.-140    	; 0x68c <write_74hc595>

  io_delay();
     718:	c6 df       	rcall	.-116    	; 0x6a6 <io_delay>
  
  /*send low 4 lsb*/
  bus4w&=~_DATA;         
     71a:	80 91 91 00 	lds	r24, 0x0091
     71e:	80 7f       	andi	r24, 0xF0	; 240
  bus4w|=(c)&_DATA; 
     720:	cf 70       	andi	r28, 0x0F	; 15
     722:	8c 2b       	or	r24, r28
     724:	80 93 91 00 	sts	0x0091, r24
  _data();
     728:	b1 df       	rcall	.-158    	; 0x68c <write_74hc595>
  io_delay();
     72a:	bd df       	rcall	.-134    	; 0x6a6 <io_delay>

  bus4w |=_EN;  
     72c:	80 91 91 00 	lds	r24, 0x0091
     730:	80 61       	ori	r24, 0x10	; 16
     732:	80 93 91 00 	sts	0x0091, r24
  _rswe();
     736:	aa df       	rcall	.-172    	; 0x68c <write_74hc595>
  io_delay(); 
     738:	b6 df       	rcall	.-148    	; 0x6a6 <io_delay>
  bus4w &=~_EN;   
     73a:	80 91 91 00 	lds	r24, 0x0091
     73e:	8f 7e       	andi	r24, 0xEF	; 239
     740:	80 93 91 00 	sts	0x0091, r24
  _rswe();
     744:	a3 df       	rcall	.-186    	; 0x68c <write_74hc595>
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	08 95       	ret

0000074c <lcd1602_init>:
  
  
}

#define send_cmd(data) hd44870_send(data,1)
#define send_data(data) hd44870_send(data,0)

void lcd1602_init(void)    
{
  io_init();
     74c:	75 df       	rcall	.-278    	; 0x638 <init_74hc595>

  send_cmd(0x33);
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	83 e3       	ldi	r24, 0x33	; 51
     752:	b2 df       	rcall	.-156    	; 0x6b8 <hd44870_send>
  io_50ms();
     754:	ac df       	rcall	.-168    	; 0x6ae <io_50ms>
  send_cmd(0x32);
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	82 e3       	ldi	r24, 0x32	; 50
     75a:	ae df       	rcall	.-164    	; 0x6b8 <hd44870_send>
  io_50ms();
     75c:	a8 df       	rcall	.-176    	; 0x6ae <io_50ms>

  send_cmd(0x28); /* ４位数据线，５＊１０字体 */
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	88 e2       	ldi	r24, 0x28	; 40
     762:	aa df       	rcall	.-172    	; 0x6b8 <hd44870_send>
  io_50ms();
     764:	a4 df       	rcall	.-184    	; 0x6ae <io_50ms>
  
  send_cmd(0x0c); /*开显示，无光标， 0xf：开光标并闪烁*/   
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	a6 df       	rcall	.-180    	; 0x6b8 <hd44870_send>
  io_50ms();
     76c:	a0 df       	rcall	.-192    	; 0x6ae <io_50ms>

  send_cmd(0x06);  /* 光标自动右移，整屏不移动 */
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	a2 df       	rcall	.-188    	; 0x6b8 <hd44870_send>
  io_50ms();
     774:	9c df       	rcall	.-200    	; 0x6ae <io_50ms>
  

  send_cmd(0x01);  /*清屏*/
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	86 2f       	mov	r24, r22
     77a:	9e df       	rcall	.-196    	; 0x6b8 <hd44870_send>
  io_50ms();io_50ms();
     77c:	98 df       	rcall	.-208    	; 0x6ae <io_50ms>
     77e:	97 df       	rcall	.-210    	; 0x6ae <io_50ms>
     780:	08 95       	ret

00000782 <lcd_cursor>:
}


void lcd_cursor(char x, char y)
{
	send_cmd(x+(y?0xc0:0x80));  
     782:	28 2f       	mov	r18, r24
     784:	33 27       	eor	r19, r19
     786:	66 23       	and	r22, r22
     788:	19 f0       	breq	.+6      	; 0x790 <lcd_cursor+0xe>
     78a:	82 2f       	mov	r24, r18
     78c:	80 54       	subi	r24, 0x40	; 64
     78e:	02 c0       	rjmp	.+4      	; 0x794 <lcd_cursor+0x12>
     790:	82 2f       	mov	r24, r18
     792:	80 58       	subi	r24, 0x80	; 128
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	90 df       	rcall	.-224    	; 0x6b8 <hd44870_send>
     798:	08 95       	ret

0000079a <lcd_puts>:
}

void lcd_puts(char *s) 
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
    while (*s) 
    {
      send_data( *s );
      s ++;
     7a0:	88 81       	ld	r24, Y
     7a2:	88 23       	and	r24, r24
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <lcd_puts+0x18>
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	89 91       	ld	r24, Y+
     7aa:	86 df       	rcall	.-244    	; 0x6b8 <hd44870_send>
     7ac:	88 81       	ld	r24, Y
     7ae:	88 23       	and	r24, r24
     7b0:	d1 f7       	brne	.-12     	; 0x7a6 <lcd_puts+0xc>
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <lcd_clear>:
    }
     
}




void lcd_clear()
{
   io_50ms();
     7b8:	7a df       	rcall	.-268    	; 0x6ae <io_50ms>
   send_cmd(0x01);  /*清屏*/
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	86 2f       	mov	r24, r22
     7be:	7c df       	rcall	.-264    	; 0x6b8 <hd44870_send>
   io_50ms();
     7c0:	76 df       	rcall	.-276    	; 0x6ae <io_50ms>
     7c2:	08 95       	ret

000007c4 <lcd_putc>:
   
}

void lcd_putc(char c) //列x=0~15,行y=0,1
{
  send_data( c);
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	78 df       	rcall	.-272    	; 0x6b8 <hd44870_send>
     7c8:	08 95       	ret

000007ca <delay>:


/*0-64 seconds*/
void delay(unsigned long ticks)
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
  
   unsigned long lt = jiffers;
     7d2:	20 91 92 00 	lds	r18, 0x0092
     7d6:	30 91 93 00 	lds	r19, 0x0093
     7da:	40 91 94 00 	lds	r20, 0x0094
     7de:	50 91 95 00 	lds	r21, 0x0095
     7e2:	28 0f       	add	r18, r24
     7e4:	39 1f       	adc	r19, r25
     7e6:	4a 1f       	adc	r20, r26
     7e8:	5b 1f       	adc	r21, r27

   while(!timeafter(jiffers,(lt+ ticks)));
     7ea:	80 91 92 00 	lds	r24, 0x0092
     7ee:	90 91 93 00 	lds	r25, 0x0093
     7f2:	a0 91 94 00 	lds	r26, 0x0094
     7f6:	b0 91 95 00 	lds	r27, 0x0095
     7fa:	fa 01       	movw	r30, r20
     7fc:	e9 01       	movw	r28, r18
     7fe:	c8 1b       	sub	r28, r24
     800:	d9 0b       	sbc	r29, r25
     802:	ea 0b       	sbc	r30, r26
     804:	fb 0b       	sbc	r31, r27
     806:	8a f7       	brpl	.-30     	; 0x7ea <delay+0x20>
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <_swap8>:
/*abcd1234 => 4321dcba */
unsigned char _swap8(unsigned char x)
{
    /*abcd1234 => 1234abcd*/
	x= (x>>4) | (x<<4);
     80e:	28 2f       	mov	r18, r24
     810:	22 95       	swap	r18
     812:	2f 70       	andi	r18, 0x0F	; 15
     814:	99 27       	eor	r25, r25
     816:	e4 e0       	ldi	r30, 0x04	; 4
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	ea 95       	dec	r30
     81e:	e1 f7       	brne	.-8      	; 0x818 <_swap8+0xa>
     820:	28 2b       	or	r18, r24
	/*1234abcd  => 3412cdab*/
    	   /*1200ab00*/         /*003400cd*/
	x= ((x&0xCC)>>2) | ((x&0x33)<<2);
     822:	33 27       	eor	r19, r19
     824:	c9 01       	movw	r24, r18
     826:	8c 7c       	andi	r24, 0xCC	; 204
     828:	90 70       	andi	r25, 0x00	; 0
     82a:	95 95       	asr	r25
     82c:	87 95       	ror	r24
     82e:	95 95       	asr	r25
     830:	87 95       	ror	r24
     832:	23 73       	andi	r18, 0x33	; 51
     834:	30 70       	andi	r19, 0x00	; 0
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
                 /*0xcc*/            /*0x33*/
	/*3412cdab => 4321dcba*/
	/*b10101010*/               /*b01010101*/
	x= ((x&0xAA)>>1) | ((x&0x55)<<1);
     83e:	82 2b       	or	r24, r18
     840:	93 2b       	or	r25, r19
     842:	9c 01       	movw	r18, r24
     844:	2a 7a       	andi	r18, 0xAA	; 170
     846:	30 70       	andi	r19, 0x00	; 0
     848:	35 95       	asr	r19
     84a:	27 95       	ror	r18
     84c:	85 75       	andi	r24, 0x55	; 85
     84e:	90 70       	andi	r25, 0x00	; 0
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
            /*0xAA*/            /*0x55*/
    return x;
}
     854:	82 2b       	or	r24, r18
     856:	93 2b       	or	r25, r19
     858:	08 95       	ret

0000085a <hex2c>:


char hex2c(char hex)
{

   if(hex<0xa)
     85a:	8a 30       	cpi	r24, 0x0A	; 10
     85c:	18 f4       	brcc	.+6      	; 0x864 <hex2c+0xa>
      return '0'+hex;
     85e:	80 5d       	subi	r24, 0xD0	; 208
     860:	99 27       	eor	r25, r25
     862:	08 95       	ret
   else
      return 'a'+hex-0xa;		   
     864:	89 5a       	subi	r24, 0xA9	; 169
     866:	99 27       	eor	r25, r25
}
     868:	08 95       	ret

0000086a <lcd_showhex>:

lcd_showhex(unsigned char x)
{
     86a:	1f 93       	push	r17
     86c:	18 2f       	mov	r17, r24
  
    lcd_putc(hex2c(((x&0xF0)>>4)));
     86e:	99 27       	eor	r25, r25
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	96 95       	lsr	r25
     874:	87 95       	ror	r24
     876:	fa 95       	dec	r31
     878:	e1 f7       	brne	.-8      	; 0x872 <lcd_showhex+0x8>
     87a:	ef df       	rcall	.-34     	; 0x85a <hex2c>
     87c:	a3 df       	rcall	.-186    	; 0x7c4 <lcd_putc>
    lcd_putc(hex2c((x&0xF)));
     87e:	81 2f       	mov	r24, r17
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	eb df       	rcall	.-42     	; 0x85a <hex2c>
     884:	9f df       	rcall	.-194    	; 0x7c4 <lcd_putc>
     886:	1f 91       	pop	r17
     888:	08 95       	ret

0000088a <print10>:

}




void print10(unsigned short n)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	ec 01       	movw	r28, r24
     char x;
	 x=n/1000;
     890:	68 ee       	ldi	r22, 0xE8	; 232
     892:	73 e0       	ldi	r23, 0x03	; 3
     894:	84 d6       	rcall	.+3336   	; 0x159e <__udivmodhi4>
	 if(x)
     896:	66 23       	and	r22, r22
     898:	19 f0       	breq	.+6      	; 0x8a0 <print10+0x16>
	    lcd_putc(hex2c(x));
     89a:	86 2f       	mov	r24, r22
     89c:	de df       	rcall	.-68     	; 0x85a <hex2c>
     89e:	92 df       	rcall	.-220    	; 0x7c4 <lcd_putc>
	 n = n%1000;
     8a0:	ce 01       	movw	r24, r28
     8a2:	68 ee       	ldi	r22, 0xE8	; 232
     8a4:	73 e0       	ldi	r23, 0x03	; 3
     8a6:	7b d6       	rcall	.+3318   	; 0x159e <__udivmodhi4>
     8a8:	ec 01       	movw	r28, r24

	 lcd_putc(hex2c(n/100));
     8aa:	64 e6       	ldi	r22, 0x64	; 100
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	77 d6       	rcall	.+3310   	; 0x159e <__udivmodhi4>
     8b0:	cb 01       	movw	r24, r22
     8b2:	d3 df       	rcall	.-90     	; 0x85a <hex2c>
     8b4:	87 df       	rcall	.-242    	; 0x7c4 <lcd_putc>
	 n = n%100;
     8b6:	ce 01       	movw	r24, r28
     8b8:	64 e6       	ldi	r22, 0x64	; 100
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	70 d6       	rcall	.+3296   	; 0x159e <__udivmodhi4>
     8be:	ec 01       	movw	r28, r24

	 lcd_putc( hex2c(n/10));
     8c0:	6a e0       	ldi	r22, 0x0A	; 10
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	6c d6       	rcall	.+3288   	; 0x159e <__udivmodhi4>
     8c6:	cb 01       	movw	r24, r22
     8c8:	c8 df       	rcall	.-112    	; 0x85a <hex2c>
     8ca:	7c df       	rcall	.-264    	; 0x7c4 <lcd_putc>
	 lcd_putc( hex2c(n%10));
     8cc:	ce 01       	movw	r24, r28
     8ce:	6a e0       	ldi	r22, 0x0A	; 10
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	65 d6       	rcall	.+3274   	; 0x159e <__udivmodhi4>
     8d4:	c2 df       	rcall	.-124    	; 0x85a <hex2c>
     8d6:	76 df       	rcall	.-276    	; 0x7c4 <lcd_putc>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <printLL>:
}

void printLL(unsigned long n, char dot, char prec)
{
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	7b 01       	movw	r14, r22
     8f0:	8c 01       	movw	r16, r24
     8f2:	d4 2e       	mov	r13, r20
     8f4:	b2 2e       	mov	r11, r18
     //irqoff();
	 char frac=0,sf=0;
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	cc 2e       	mov	r12, r28

	 lcd_putc(hex2c(n/10000000));
     8fa:	20 e8       	ldi	r18, 0x80	; 128
     8fc:	36 e9       	ldi	r19, 0x96	; 150
     8fe:	48 e9       	ldi	r20, 0x98	; 152
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	61 d6       	rcall	.+3266   	; 0x15c6 <__udivmodsi4>
     904:	da 01       	movw	r26, r20
     906:	c9 01       	movw	r24, r18
     908:	a8 df       	rcall	.-176    	; 0x85a <hex2c>
     90a:	5c df       	rcall	.-328    	; 0x7c4 <lcd_putc>
	 n = n%10000000;
     90c:	c8 01       	movw	r24, r16
     90e:	b7 01       	movw	r22, r14
     910:	20 e8       	ldi	r18, 0x80	; 128
     912:	36 e9       	ldi	r19, 0x96	; 150
     914:	48 e9       	ldi	r20, 0x98	; 152
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	56 d6       	rcall	.+3244   	; 0x15c6 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
	 if(7==dot){
     91e:	87 e0       	ldi	r24, 0x07	; 7
     920:	d8 16       	cp	r13, r24
     922:	21 f4       	brne	.+8      	; 0x92c <printLL+0x4e>
	 	lcd_putc('.');
     924:	8e e2       	ldi	r24, 0x2E	; 46
     926:	4e df       	rcall	.-356    	; 0x7c4 <lcd_putc>
		sf=1;
     928:	31 e0       	ldi	r19, 0x01	; 1
     92a:	c3 2e       	mov	r12, r19
	 }
		     
     lcd_putc(hex2c(n/1000000));//M
     92c:	c8 01       	movw	r24, r16
     92e:	b7 01       	movw	r22, r14
     930:	20 e4       	ldi	r18, 0x40	; 64
     932:	32 e4       	ldi	r19, 0x42	; 66
     934:	4f e0       	ldi	r20, 0x0F	; 15
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	46 d6       	rcall	.+3212   	; 0x15c6 <__udivmodsi4>
     93a:	da 01       	movw	r26, r20
     93c:	c9 01       	movw	r24, r18
     93e:	8d df       	rcall	.-230    	; 0x85a <hex2c>
     940:	41 df       	rcall	.-382    	; 0x7c4 <lcd_putc>
	 if(sf){frac++; if(frac>=prec)return;}
     942:	cc 20       	and	r12, r12
     944:	21 f0       	breq	.+8      	; 0x94e <printLL+0x70>
     946:	c1 e0       	ldi	r28, 0x01	; 1
     948:	cb 15       	cp	r28, r11
     94a:	08 f0       	brcs	.+2      	; 0x94e <printLL+0x70>
     94c:	b3 c0       	rjmp	.+358    	; 0xab4 <printLL+0x1d6>
	 
	 n = n%1000000;
     94e:	c8 01       	movw	r24, r16
     950:	b7 01       	movw	r22, r14
     952:	20 e4       	ldi	r18, 0x40	; 64
     954:	32 e4       	ldi	r19, 0x42	; 66
     956:	4f e0       	ldi	r20, 0x0F	; 15
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	35 d6       	rcall	.+3178   	; 0x15c6 <__udivmodsi4>
     95c:	7b 01       	movw	r14, r22
     95e:	8c 01       	movw	r16, r24
	 if(6==dot){
     960:	86 e0       	ldi	r24, 0x06	; 6
     962:	d8 16       	cp	r13, r24
     964:	21 f4       	brne	.+8      	; 0x96e <printLL+0x90>
	 	lcd_putc('.');
     966:	8e e2       	ldi	r24, 0x2E	; 46
     968:	2d df       	rcall	.-422    	; 0x7c4 <lcd_putc>
		sf=1;
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	c2 2e       	mov	r12, r18
	 }
	
     
	 lcd_putc(hex2c(n/100000));
     96e:	c8 01       	movw	r24, r16
     970:	b7 01       	movw	r22, r14
     972:	20 ea       	ldi	r18, 0xA0	; 160
     974:	36 e8       	ldi	r19, 0x86	; 134
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	25 d6       	rcall	.+3146   	; 0x15c6 <__udivmodsi4>
     97c:	da 01       	movw	r26, r20
     97e:	c9 01       	movw	r24, r18
     980:	6c df       	rcall	.-296    	; 0x85a <hex2c>
     982:	20 df       	rcall	.-448    	; 0x7c4 <lcd_putc>
	 if(sf){frac++; if(frac>=prec)return;}
     984:	cc 20       	and	r12, r12
     986:	21 f0       	breq	.+8      	; 0x990 <printLL+0xb2>
     988:	cf 5f       	subi	r28, 0xFF	; 255
     98a:	cb 15       	cp	r28, r11
     98c:	08 f0       	brcs	.+2      	; 0x990 <printLL+0xb2>
     98e:	92 c0       	rjmp	.+292    	; 0xab4 <printLL+0x1d6>
	 n = n%100000;
     990:	c8 01       	movw	r24, r16
     992:	b7 01       	movw	r22, r14
     994:	20 ea       	ldi	r18, 0xA0	; 160
     996:	36 e8       	ldi	r19, 0x86	; 134
     998:	41 e0       	ldi	r20, 0x01	; 1
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	14 d6       	rcall	.+3112   	; 0x15c6 <__udivmodsi4>
     99e:	7b 01       	movw	r14, r22
     9a0:	8c 01       	movw	r16, r24
	 if(5==dot){
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	d8 16       	cp	r13, r24
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <printLL+0xd2>
	 	lcd_putc('.');
     9a8:	8e e2       	ldi	r24, 0x2E	; 46
     9aa:	0c df       	rcall	.-488    	; 0x7c4 <lcd_putc>
		sf=1;
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	c9 2e       	mov	r12, r25
	 }
	

	 lcd_putc(hex2c(n/10000)); 
     9b0:	c8 01       	movw	r24, r16
     9b2:	b7 01       	movw	r22, r14
     9b4:	20 e1       	ldi	r18, 0x10	; 16
     9b6:	37 e2       	ldi	r19, 0x27	; 39
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	04 d6       	rcall	.+3080   	; 0x15c6 <__udivmodsi4>
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	4b df       	rcall	.-362    	; 0x85a <hex2c>
     9c4:	ff de       	rcall	.-514    	; 0x7c4 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     9c6:	cc 20       	and	r12, r12
     9c8:	21 f0       	breq	.+8      	; 0x9d2 <printLL+0xf4>
     9ca:	cf 5f       	subi	r28, 0xFF	; 255
     9cc:	cb 15       	cp	r28, r11
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <printLL+0xf4>
     9d0:	71 c0       	rjmp	.+226    	; 0xab4 <printLL+0x1d6>
	 n = n%10000;
     9d2:	c8 01       	movw	r24, r16
     9d4:	b7 01       	movw	r22, r14
     9d6:	20 e1       	ldi	r18, 0x10	; 16
     9d8:	37 e2       	ldi	r19, 0x27	; 39
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	f3 d5       	rcall	.+3046   	; 0x15c6 <__udivmodsi4>
     9e0:	7b 01       	movw	r14, r22
     9e2:	8c 01       	movw	r16, r24
	 if(4==dot){
     9e4:	84 e0       	ldi	r24, 0x04	; 4
     9e6:	d8 16       	cp	r13, r24
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <printLL+0x114>
	 	sf=1;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	c8 2e       	mov	r12, r24
	 	lcd_putc('.');
     9ee:	8e e2       	ldi	r24, 0x2E	; 46
     9f0:	e9 de       	rcall	.-558    	; 0x7c4 <lcd_putc>
	 }
	
	 lcd_putc(hex2c(n/1000));  //K
     9f2:	c8 01       	movw	r24, r16
     9f4:	b7 01       	movw	r22, r14
     9f6:	28 ee       	ldi	r18, 0xE8	; 232
     9f8:	33 e0       	ldi	r19, 0x03	; 3
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	e3 d5       	rcall	.+3014   	; 0x15c6 <__udivmodsi4>
     a00:	da 01       	movw	r26, r20
     a02:	c9 01       	movw	r24, r18
     a04:	2a df       	rcall	.-428    	; 0x85a <hex2c>
     a06:	de de       	rcall	.-580    	; 0x7c4 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     a08:	cc 20       	and	r12, r12
     a0a:	21 f0       	breq	.+8      	; 0xa14 <printLL+0x136>
     a0c:	cf 5f       	subi	r28, 0xFF	; 255
     a0e:	cb 15       	cp	r28, r11
     a10:	08 f0       	brcs	.+2      	; 0xa14 <printLL+0x136>
     a12:	50 c0       	rjmp	.+160    	; 0xab4 <printLL+0x1d6>
	 n = n%1000;
     a14:	c8 01       	movw	r24, r16
     a16:	b7 01       	movw	r22, r14
     a18:	28 ee       	ldi	r18, 0xE8	; 232
     a1a:	33 e0       	ldi	r19, 0x03	; 3
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	d2 d5       	rcall	.+2980   	; 0x15c6 <__udivmodsi4>
     a22:	7b 01       	movw	r14, r22
     a24:	8c 01       	movw	r16, r24
	 if(3==dot){
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	d8 16       	cp	r13, r24
     a2a:	21 f4       	brne	.+8      	; 0xa34 <printLL+0x156>
	 	lcd_putc('.');
     a2c:	8e e2       	ldi	r24, 0x2E	; 46
     a2e:	ca de       	rcall	.-620    	; 0x7c4 <lcd_putc>
		sf=1;
     a30:	b1 e0       	ldi	r27, 0x01	; 1
     a32:	cb 2e       	mov	r12, r27
	  }
		   	
	 lcd_putc(hex2c(n/100));
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	24 e6       	ldi	r18, 0x64	; 100
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	c2 d5       	rcall	.+2948   	; 0x15c6 <__udivmodsi4>
     a42:	da 01       	movw	r26, r20
     a44:	c9 01       	movw	r24, r18
     a46:	09 df       	rcall	.-494    	; 0x85a <hex2c>
     a48:	bd de       	rcall	.-646    	; 0x7c4 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     a4a:	cc 20       	and	r12, r12
     a4c:	19 f0       	breq	.+6      	; 0xa54 <printLL+0x176>
     a4e:	cf 5f       	subi	r28, 0xFF	; 255
     a50:	cb 15       	cp	r28, r11
     a52:	80 f5       	brcc	.+96     	; 0xab4 <printLL+0x1d6>
	 n = n%100;
     a54:	c8 01       	movw	r24, r16
     a56:	b7 01       	movw	r22, r14
     a58:	24 e6       	ldi	r18, 0x64	; 100
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	b2 d5       	rcall	.+2916   	; 0x15c6 <__udivmodsi4>
     a62:	7b 01       	movw	r14, r22
     a64:	8c 01       	movw	r16, r24
	 if(2==dot){
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	d8 16       	cp	r13, r24
     a6a:	21 f4       	brne	.+8      	; 0xa74 <printLL+0x196>
	 	lcd_putc('.');
     a6c:	8e e2       	ldi	r24, 0x2E	; 46
     a6e:	aa de       	rcall	.-684    	; 0x7c4 <lcd_putc>
		sf=1;
     a70:	a1 e0       	ldi	r26, 0x01	; 1
     a72:	ca 2e       	mov	r12, r26
	 }
	 
	 lcd_putc( hex2c(n/10));
     a74:	c8 01       	movw	r24, r16
     a76:	b7 01       	movw	r22, r14
     a78:	2a e0       	ldi	r18, 0x0A	; 10
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	a2 d5       	rcall	.+2884   	; 0x15c6 <__udivmodsi4>
     a82:	da 01       	movw	r26, r20
     a84:	c9 01       	movw	r24, r18
     a86:	e9 de       	rcall	.-558    	; 0x85a <hex2c>
     a88:	9d de       	rcall	.-710    	; 0x7c4 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     a8a:	cc 20       	and	r12, r12
     a8c:	19 f0       	breq	.+6      	; 0xa94 <printLL+0x1b6>
     a8e:	cf 5f       	subi	r28, 0xFF	; 255
     a90:	cb 15       	cp	r28, r11
     a92:	80 f4       	brcc	.+32     	; 0xab4 <printLL+0x1d6>
	 if(1==dot){
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	d8 16       	cp	r13, r24
     a98:	11 f4       	brne	.+4      	; 0xa9e <printLL+0x1c0>
	 	sf=1;
	 	lcd_putc('.');
     a9a:	8e e2       	ldi	r24, 0x2E	; 46
     a9c:	93 de       	rcall	.-730    	; 0x7c4 <lcd_putc>
	 }
	 lcd_putc( hex2c(n%10));
     a9e:	c8 01       	movw	r24, r16
     aa0:	b7 01       	movw	r22, r14
     aa2:	2a e0       	ldi	r18, 0x0A	; 10
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	8d d5       	rcall	.+2842   	; 0x15c6 <__udivmodsi4>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	d4 de       	rcall	.-600    	; 0x85a <hex2c>
     ab2:	88 de       	rcall	.-752    	; 0x7c4 <lcd_putc>
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	08 95       	ret

00000ac6 <__fixunssfsi>:
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	7b 01       	movw	r14, r22
     ad0:	8c 01       	movw	r16, r24
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	5f e4       	ldi	r21, 0x4F	; 79
     ada:	ad d2       	rcall	.+1370   	; 0x1036 <__gesf2>
     adc:	88 23       	and	r24, r24
     ade:	8c f0       	brlt	.+34     	; 0xb02 <__fixunssfsi+0x3c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	5f ec       	ldi	r21, 0xCF	; 207
     ae8:	c8 01       	movw	r24, r16
     aea:	b7 01       	movw	r22, r14
     aec:	34 d1       	rcall	.+616    	; 0xd56 <__addsf3>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	31 d3       	rcall	.+1634   	; 0x115a <__fixsfsi>
     af8:	60 50       	subi	r22, 0x00	; 0
     afa:	70 40       	sbci	r23, 0x00	; 0
     afc:	80 40       	sbci	r24, 0x00	; 0
     afe:	90 48       	sbci	r25, 0x80	; 128
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <__fixunssfsi+0x42>
     b02:	c8 01       	movw	r24, r16
     b04:	b7 01       	movw	r22, r14
     b06:	29 d3       	rcall	.+1618   	; 0x115a <__fixsfsi>
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <_fpadd_parts>:
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ee e8       	ldi	r30, 0x8E	; 142
     b18:	f5 e0       	ldi	r31, 0x05	; 5
     b1a:	77 c5       	rjmp	.+2798   	; 0x160a <__prologue_saves__>
     b1c:	8c 01       	movw	r16, r24
     b1e:	7b 01       	movw	r14, r22
     b20:	5a 01       	movw	r10, r20
     b22:	dc 01       	movw	r26, r24
     b24:	8c 91       	ld	r24, X
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	58 f0       	brcs	.+22     	; 0xb40 <_fpadd_parts+0x2e>
     b2a:	fb 01       	movw	r30, r22
     b2c:	90 81       	ld	r25, Z
     b2e:	92 30       	cpi	r25, 0x02	; 2
     b30:	10 f4       	brcc	.+4      	; 0xb36 <_fpadd_parts+0x24>
     b32:	a7 01       	movw	r20, r14
     b34:	0b c1       	rjmp	.+534    	; 0xd4c <_fpadd_parts+0x23a>
     b36:	84 30       	cpi	r24, 0x04	; 4
     b38:	29 f4       	brne	.+10     	; 0xb44 <_fpadd_parts+0x32>
     b3a:	94 30       	cpi	r25, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <_fpadd_parts+0x2e>
     b3e:	a6 c0       	rjmp	.+332    	; 0xc8c <_fpadd_parts+0x17a>
     b40:	a8 01       	movw	r20, r16
     b42:	04 c1       	rjmp	.+520    	; 0xd4c <_fpadd_parts+0x23a>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	a9 f3       	breq	.-22     	; 0xb32 <_fpadd_parts+0x20>
     b48:	92 30       	cpi	r25, 0x02	; 2
     b4a:	09 f4       	brne	.+2      	; 0xb4e <_fpadd_parts+0x3c>
     b4c:	a9 c0       	rjmp	.+338    	; 0xca0 <_fpadd_parts+0x18e>
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	81 f3       	breq	.-32     	; 0xb32 <_fpadd_parts+0x20>
     b52:	f8 01       	movw	r30, r16
     b54:	c2 80       	ldd	r12, Z+2	; 0x02
     b56:	d3 80       	ldd	r13, Z+3	; 0x03
     b58:	fb 01       	movw	r30, r22
     b5a:	62 81       	ldd	r22, Z+2	; 0x02
     b5c:	73 81       	ldd	r23, Z+3	; 0x03
     b5e:	f8 01       	movw	r30, r16
     b60:	24 81       	ldd	r18, Z+4	; 0x04
     b62:	35 81       	ldd	r19, Z+5	; 0x05
     b64:	46 81       	ldd	r20, Z+6	; 0x06
     b66:	57 81       	ldd	r21, Z+7	; 0x07
     b68:	f7 01       	movw	r30, r14
     b6a:	64 80       	ldd	r6, Z+4	; 0x04
     b6c:	75 80       	ldd	r7, Z+5	; 0x05
     b6e:	86 80       	ldd	r8, Z+6	; 0x06
     b70:	97 80       	ldd	r9, Z+7	; 0x07
     b72:	c6 01       	movw	r24, r12
     b74:	86 1b       	sub	r24, r22
     b76:	97 0b       	sbc	r25, r23
     b78:	97 fd       	sbrc	r25, 7
     b7a:	d8 c0       	rjmp	.+432    	; 0xd2c <_fpadd_parts+0x21a>
     b7c:	80 97       	sbiw	r24, 0x20	; 32
     b7e:	0c f4       	brge	.+2      	; 0xb82 <_fpadd_parts+0x70>
     b80:	6c c0       	rjmp	.+216    	; 0xc5a <_fpadd_parts+0x148>
     b82:	6c 15       	cp	r22, r12
     b84:	7d 05       	cpc	r23, r13
     b86:	0c f0       	brlt	.+2      	; 0xb8a <_fpadd_parts+0x78>
     b88:	ad c0       	rjmp	.+346    	; 0xce4 <_fpadd_parts+0x1d2>
     b8a:	66 24       	eor	r6, r6
     b8c:	77 24       	eor	r7, r7
     b8e:	43 01       	movw	r8, r6
     b90:	f8 01       	movw	r30, r16
     b92:	61 81       	ldd	r22, Z+1	; 0x01
     b94:	f7 01       	movw	r30, r14
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	68 17       	cp	r22, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <_fpadd_parts+0x8c>
     b9c:	99 c0       	rjmp	.+306    	; 0xcd0 <_fpadd_parts+0x1be>
     b9e:	66 23       	and	r22, r22
     ba0:	09 f4       	brne	.+2      	; 0xba4 <_fpadd_parts+0x92>
     ba2:	91 c0       	rjmp	.+290    	; 0xcc6 <_fpadd_parts+0x1b4>
     ba4:	62 1a       	sub	r6, r18
     ba6:	73 0a       	sbc	r7, r19
     ba8:	84 0a       	sbc	r8, r20
     baa:	95 0a       	sbc	r9, r21
     bac:	a4 01       	movw	r20, r8
     bae:	93 01       	movw	r18, r6
     bb0:	57 fd       	sbrc	r21, 7
     bb2:	c0 c0       	rjmp	.+384    	; 0xd34 <_fpadd_parts+0x222>
     bb4:	f5 01       	movw	r30, r10
     bb6:	11 82       	std	Z+1, r1	; 0x01
     bb8:	b6 01       	movw	r22, r12
     bba:	19 01       	movw	r2, r18
     bbc:	2a 01       	movw	r4, r20
     bbe:	79 01       	movw	r14, r18
     bc0:	8a 01       	movw	r16, r20
     bc2:	39 01       	movw	r6, r18
     bc4:	4a 01       	movw	r8, r20
     bc6:	08 94       	sec
     bc8:	61 08       	sbc	r6, r1
     bca:	71 08       	sbc	r7, r1
     bcc:	81 08       	sbc	r8, r1
     bce:	91 08       	sbc	r9, r1
     bd0:	ff ef       	ldi	r31, 0xFF	; 255
     bd2:	6f 16       	cp	r6, r31
     bd4:	ff ef       	ldi	r31, 0xFF	; 255
     bd6:	7f 06       	cpc	r7, r31
     bd8:	ff ef       	ldi	r31, 0xFF	; 255
     bda:	8f 06       	cpc	r8, r31
     bdc:	ff e3       	ldi	r31, 0x3F	; 63
     bde:	9f 06       	cpc	r9, r31
     be0:	f0 f4       	brcc	.+60     	; 0xc1e <_fpadd_parts+0x10c>
     be2:	a8 01       	movw	r20, r16
     be4:	97 01       	movw	r18, r14
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	44 1f       	adc	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	19 01       	movw	r2, r18
     bf0:	2a 01       	movw	r4, r20
     bf2:	b6 01       	movw	r22, r12
     bf4:	61 50       	subi	r22, 0x01	; 1
     bf6:	70 40       	sbci	r23, 0x00	; 0
     bf8:	6b 01       	movw	r12, r22
     bfa:	79 01       	movw	r14, r18
     bfc:	8a 01       	movw	r16, r20
     bfe:	39 01       	movw	r6, r18
     c00:	4a 01       	movw	r8, r20
     c02:	08 94       	sec
     c04:	61 08       	sbc	r6, r1
     c06:	71 08       	sbc	r7, r1
     c08:	81 08       	sbc	r8, r1
     c0a:	91 08       	sbc	r9, r1
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	68 16       	cp	r6, r24
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	78 06       	cpc	r7, r24
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	88 06       	cpc	r8, r24
     c18:	8f e3       	ldi	r24, 0x3F	; 63
     c1a:	98 06       	cpc	r9, r24
     c1c:	10 f3       	brcs	.-60     	; 0xbe2 <_fpadd_parts+0xd0>
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	d5 01       	movw	r26, r10
     c22:	8c 93       	st	X, r24
     c24:	57 fc       	sbrc	r5, 7
     c26:	64 c0       	rjmp	.+200    	; 0xcf0 <_fpadd_parts+0x1de>
     c28:	f5 01       	movw	r30, r10
     c2a:	24 83       	std	Z+4, r18	; 0x04
     c2c:	35 83       	std	Z+5, r19	; 0x05
     c2e:	46 83       	std	Z+6, r20	; 0x06
     c30:	57 83       	std	Z+7, r21	; 0x07
     c32:	73 83       	std	Z+3, r23	; 0x03
     c34:	62 83       	std	Z+2, r22	; 0x02
     c36:	a5 01       	movw	r20, r10
     c38:	89 c0       	rjmp	.+274    	; 0xd4c <_fpadd_parts+0x23a>
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	d4 01       	movw	r26, r8
     c40:	c3 01       	movw	r24, r6
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	a0 70       	andi	r26, 0x00	; 0
     c48:	b0 70       	andi	r27, 0x00	; 0
     c4a:	96 94       	lsr	r9
     c4c:	87 94       	ror	r8
     c4e:	77 94       	ror	r7
     c50:	67 94       	ror	r6
     c52:	68 2a       	or	r6, r24
     c54:	79 2a       	or	r7, r25
     c56:	8a 2a       	or	r8, r26
     c58:	9b 2a       	or	r9, r27
     c5a:	6c 15       	cp	r22, r12
     c5c:	7d 05       	cpc	r23, r13
     c5e:	6c f3       	brlt	.-38     	; 0xc3a <_fpadd_parts+0x128>
     c60:	11 c0       	rjmp	.+34     	; 0xc84 <_fpadd_parts+0x172>
     c62:	08 94       	sec
     c64:	c1 1c       	adc	r12, r1
     c66:	d1 1c       	adc	r13, r1
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	56 95       	lsr	r21
     c76:	47 95       	ror	r20
     c78:	37 95       	ror	r19
     c7a:	27 95       	ror	r18
     c7c:	28 2b       	or	r18, r24
     c7e:	39 2b       	or	r19, r25
     c80:	4a 2b       	or	r20, r26
     c82:	5b 2b       	or	r21, r27
     c84:	c6 16       	cp	r12, r22
     c86:	d7 06       	cpc	r13, r23
     c88:	64 f3       	brlt	.-40     	; 0xc62 <_fpadd_parts+0x150>
     c8a:	82 cf       	rjmp	.-252    	; 0xb90 <_fpadd_parts+0x7e>
     c8c:	f8 01       	movw	r30, r16
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	fb 01       	movw	r30, r22
     c92:	81 81       	ldd	r24, Z+1	; 0x01
     c94:	98 17       	cp	r25, r24
     c96:	09 f4       	brne	.+2      	; 0xc9a <_fpadd_parts+0x188>
     c98:	53 cf       	rjmp	.-346    	; 0xb40 <_fpadd_parts+0x2e>
     c9a:	41 e8       	ldi	r20, 0x81	; 129
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	56 c0       	rjmp	.+172    	; 0xd4c <_fpadd_parts+0x23a>
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	09 f0       	breq	.+2      	; 0xca6 <_fpadd_parts+0x194>
     ca4:	4d cf       	rjmp	.-358    	; 0xb40 <_fpadd_parts+0x2e>
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	da 01       	movw	r26, r20
     caa:	f8 01       	movw	r30, r16
     cac:	01 90       	ld	r0, Z+
     cae:	0d 92       	st	X+, r0
     cb0:	8a 95       	dec	r24
     cb2:	e1 f7       	brne	.-8      	; 0xcac <_fpadd_parts+0x19a>
     cb4:	f8 01       	movw	r30, r16
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	fb 01       	movw	r30, r22
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	89 23       	and	r24, r25
     cbe:	fa 01       	movw	r30, r20
     cc0:	81 83       	std	Z+1, r24	; 0x01
     cc2:	a5 01       	movw	r20, r10
     cc4:	43 c0       	rjmp	.+134    	; 0xd4c <_fpadd_parts+0x23a>
     cc6:	26 19       	sub	r18, r6
     cc8:	37 09       	sbc	r19, r7
     cca:	48 09       	sbc	r20, r8
     ccc:	59 09       	sbc	r21, r9
     cce:	70 cf       	rjmp	.-288    	; 0xbb0 <_fpadd_parts+0x9e>
     cd0:	f5 01       	movw	r30, r10
     cd2:	61 83       	std	Z+1, r22	; 0x01
     cd4:	b6 01       	movw	r22, r12
     cd6:	26 0d       	add	r18, r6
     cd8:	37 1d       	adc	r19, r7
     cda:	48 1d       	adc	r20, r8
     cdc:	59 1d       	adc	r21, r9
     cde:	19 01       	movw	r2, r18
     ce0:	2a 01       	movw	r4, r20
     ce2:	9d cf       	rjmp	.-198    	; 0xc1e <_fpadd_parts+0x10c>
     ce4:	6b 01       	movw	r12, r22
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	50 cf       	rjmp	.-352    	; 0xb90 <_fpadd_parts+0x7e>
     cf0:	d2 01       	movw	r26, r4
     cf2:	c1 01       	movw	r24, r2
     cf4:	b6 95       	lsr	r27
     cf6:	a7 95       	ror	r26
     cf8:	97 95       	ror	r25
     cfa:	87 95       	ror	r24
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	22 22       	and	r2, r18
     d06:	33 22       	and	r3, r19
     d08:	44 22       	and	r4, r20
     d0a:	55 22       	and	r5, r21
     d0c:	28 2a       	or	r2, r24
     d0e:	39 2a       	or	r3, r25
     d10:	4a 2a       	or	r4, r26
     d12:	5b 2a       	or	r5, r27
     d14:	f5 01       	movw	r30, r10
     d16:	24 82       	std	Z+4, r2	; 0x04
     d18:	35 82       	std	Z+5, r3	; 0x05
     d1a:	46 82       	std	Z+6, r4	; 0x06
     d1c:	57 82       	std	Z+7, r5	; 0x07
     d1e:	08 94       	sec
     d20:	c1 1c       	adc	r12, r1
     d22:	d1 1c       	adc	r13, r1
     d24:	d3 82       	std	Z+3, r13	; 0x03
     d26:	c2 82       	std	Z+2, r12	; 0x02
     d28:	a5 01       	movw	r20, r10
     d2a:	10 c0       	rjmp	.+32     	; 0xd4c <_fpadd_parts+0x23a>
     d2c:	90 95       	com	r25
     d2e:	81 95       	neg	r24
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	24 cf       	rjmp	.-440    	; 0xb7c <_fpadd_parts+0x6a>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	f5 01       	movw	r30, r10
     d38:	81 83       	std	Z+1, r24	; 0x01
     d3a:	b6 01       	movw	r22, r12
     d3c:	50 95       	com	r21
     d3e:	40 95       	com	r20
     d40:	30 95       	com	r19
     d42:	21 95       	neg	r18
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	37 cf       	rjmp	.-402    	; 0xbba <_fpadd_parts+0xa8>
     d4c:	ca 01       	movw	r24, r20
     d4e:	e2 e1       	ldi	r30, 0x12	; 18
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	76 c4       	rjmp	.+2284   	; 0x1642 <__epilogue_restores__>

00000d56 <__addsf3>:
     d56:	a0 e2       	ldi	r26, 0x20	; 32
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e0 eb       	ldi	r30, 0xB0	; 176
     d5c:	f6 e0       	ldi	r31, 0x06	; 6
     d5e:	63 c4       	rjmp	.+2246   	; 0x1626 <__prologue_saves__+0x1c>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	89 8f       	std	Y+25, r24	; 0x19
     d66:	9a 8f       	std	Y+26, r25	; 0x1a
     d68:	ab 8f       	std	Y+27, r26	; 0x1b
     d6a:	bc 8f       	std	Y+28, r27	; 0x1c
     d6c:	2d 8f       	std	Y+29, r18	; 0x1d
     d6e:	3e 8f       	std	Y+30, r19	; 0x1e
     d70:	4f 8f       	std	Y+31, r20	; 0x1f
     d72:	58 a3       	std	Y+32, r21	; 0x20
     d74:	be 01       	movw	r22, r28
     d76:	6f 5f       	subi	r22, 0xFF	; 255
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	ce 01       	movw	r24, r28
     d7c:	49 96       	adiw	r24, 0x19	; 25
     d7e:	22 d3       	rcall	.+1604   	; 0x13c4 <__unpack_f>
     d80:	8e 01       	movw	r16, r28
     d82:	07 5f       	subi	r16, 0xF7	; 247
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	b8 01       	movw	r22, r16
     d88:	ce 01       	movw	r24, r28
     d8a:	4d 96       	adiw	r24, 0x1d	; 29
     d8c:	1b d3       	rcall	.+1590   	; 0x13c4 <__unpack_f>
     d8e:	ae 01       	movw	r20, r28
     d90:	4f 5e       	subi	r20, 0xEF	; 239
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	b8 01       	movw	r22, r16
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	bb de       	rcall	.-650    	; 0xb12 <_fpadd_parts>
     d9c:	2d d2       	rcall	.+1114   	; 0x11f8 <__pack_f>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	e4 e0       	ldi	r30, 0x04	; 4
     da8:	a0 96       	adiw	r28, 0x20	; 32
     daa:	59 c4       	rjmp	.+2226   	; 0x165e <__epilogue_restores__+0x1c>

00000dac <__subsf3>:
     dac:	a0 e2       	ldi	r26, 0x20	; 32
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	eb ed       	ldi	r30, 0xDB	; 219
     db2:	f6 e0       	ldi	r31, 0x06	; 6
     db4:	38 c4       	rjmp	.+2160   	; 0x1626 <__prologue_saves__+0x1c>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	89 8f       	std	Y+25, r24	; 0x19
     dbc:	9a 8f       	std	Y+26, r25	; 0x1a
     dbe:	ab 8f       	std	Y+27, r26	; 0x1b
     dc0:	bc 8f       	std	Y+28, r27	; 0x1c
     dc2:	2d 8f       	std	Y+29, r18	; 0x1d
     dc4:	3e 8f       	std	Y+30, r19	; 0x1e
     dc6:	4f 8f       	std	Y+31, r20	; 0x1f
     dc8:	58 a3       	std	Y+32, r21	; 0x20
     dca:	be 01       	movw	r22, r28
     dcc:	6f 5f       	subi	r22, 0xFF	; 255
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	ce 01       	movw	r24, r28
     dd2:	49 96       	adiw	r24, 0x19	; 25
     dd4:	f7 d2       	rcall	.+1518   	; 0x13c4 <__unpack_f>
     dd6:	8e 01       	movw	r16, r28
     dd8:	07 5f       	subi	r16, 0xF7	; 247
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	b8 01       	movw	r22, r16
     dde:	ce 01       	movw	r24, r28
     de0:	4d 96       	adiw	r24, 0x1d	; 29
     de2:	f0 d2       	rcall	.+1504   	; 0x13c4 <__unpack_f>
     de4:	8a 85       	ldd	r24, Y+10	; 0x0a
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	89 27       	eor	r24, r25
     dea:	8a 87       	std	Y+10, r24	; 0x0a
     dec:	ae 01       	movw	r20, r28
     dee:	4f 5e       	subi	r20, 0xEF	; 239
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	b8 01       	movw	r22, r16
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	8c de       	rcall	.-744    	; 0xb12 <_fpadd_parts>
     dfa:	fe d1       	rcall	.+1020   	; 0x11f8 <__pack_f>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	e4 e0       	ldi	r30, 0x04	; 4
     e06:	a0 96       	adiw	r28, 0x20	; 32
     e08:	2a c4       	rjmp	.+2132   	; 0x165e <__epilogue_restores__+0x1c>

00000e0a <__mulsf3>:
     e0a:	a0 e2       	ldi	r26, 0x20	; 32
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e0       	ldi	r30, 0x0A	; 10
     e10:	f7 e0       	ldi	r31, 0x07	; 7
     e12:	fb c3       	rjmp	.+2038   	; 0x160a <__prologue_saves__>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	89 8f       	std	Y+25, r24	; 0x19
     e1a:	9a 8f       	std	Y+26, r25	; 0x1a
     e1c:	ab 8f       	std	Y+27, r26	; 0x1b
     e1e:	bc 8f       	std	Y+28, r27	; 0x1c
     e20:	2d 8f       	std	Y+29, r18	; 0x1d
     e22:	3e 8f       	std	Y+30, r19	; 0x1e
     e24:	4f 8f       	std	Y+31, r20	; 0x1f
     e26:	58 a3       	std	Y+32, r21	; 0x20
     e28:	be 01       	movw	r22, r28
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	ce 01       	movw	r24, r28
     e30:	49 96       	adiw	r24, 0x19	; 25
     e32:	c8 d2       	rcall	.+1424   	; 0x13c4 <__unpack_f>
     e34:	69 e0       	ldi	r22, 0x09	; 9
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	6c 0f       	add	r22, r28
     e3a:	7d 1f       	adc	r23, r29
     e3c:	ce 01       	movw	r24, r28
     e3e:	4d 96       	adiw	r24, 0x1d	; 29
     e40:	c1 d2       	rcall	.+1410   	; 0x13c4 <__unpack_f>
     e42:	fe 01       	movw	r30, r28
     e44:	31 96       	adiw	r30, 0x01	; 1
     e46:	66 24       	eor	r6, r6
     e48:	77 24       	eor	r7, r7
     e4a:	43 01       	movw	r8, r6
     e4c:	13 01       	movw	r2, r6
     e4e:	24 01       	movw	r4, r8
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	98 f0       	brcs	.+38     	; 0xe7c <__mulsf3+0x72>
     e56:	99 85       	ldd	r25, Y+9	; 0x09
     e58:	92 30       	cpi	r25, 0x02	; 2
     e5a:	58 f4       	brcc	.+22     	; 0xe72 <__mulsf3+0x68>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	8a 85       	ldd	r24, Y+10	; 0x0a
     e62:	98 13       	cpse	r25, r24
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	2a 87       	std	Y+10, r18	; 0x0a
     e68:	69 e0       	ldi	r22, 0x09	; 9
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	6c 0f       	add	r22, r28
     e6e:	7d 1f       	adc	r23, r29
     e70:	d9 c0       	rjmp	.+434    	; 0x1024 <__mulsf3+0x21a>
     e72:	84 30       	cpi	r24, 0x04	; 4
     e74:	59 f4       	brne	.+22     	; 0xe8c <__mulsf3+0x82>
     e76:	92 30       	cpi	r25, 0x02	; 2
     e78:	09 f4       	brne	.+2      	; 0xe7c <__mulsf3+0x72>
     e7a:	5b c0       	rjmp	.+182    	; 0xf32 <__mulsf3+0x128>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	8a 85       	ldd	r24, Y+10	; 0x0a
     e82:	98 13       	cpse	r25, r24
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	21 83       	std	Z+1, r18	; 0x01
     e88:	bf 01       	movw	r22, r30
     e8a:	cc c0       	rjmp	.+408    	; 0x1024 <__mulsf3+0x21a>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	09 f4       	brne	.+2      	; 0xe92 <__mulsf3+0x88>
     e90:	4d c0       	rjmp	.+154    	; 0xf2c <__mulsf3+0x122>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	99 f3       	breq	.-26     	; 0xe7c <__mulsf3+0x72>
     e96:	92 30       	cpi	r25, 0x02	; 2
     e98:	09 f3       	breq	.-62     	; 0xe5c <__mulsf3+0x52>
     e9a:	ed 80       	ldd	r14, Y+5	; 0x05
     e9c:	fe 80       	ldd	r15, Y+6	; 0x06
     e9e:	0f 81       	ldd	r16, Y+7	; 0x07
     ea0:	18 85       	ldd	r17, Y+8	; 0x08
     ea2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ea4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ea6:	4f 85       	ldd	r20, Y+15	; 0x0f
     ea8:	58 89       	ldd	r21, Y+16	; 0x10
     eaa:	64 01       	movw	r12, r8
     eac:	53 01       	movw	r10, r6
     eae:	6f e1       	ldi	r22, 0x1F	; 31
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	0c c0       	rjmp	.+24     	; 0xecc <__mulsf3+0xc2>
     eb4:	22 0f       	add	r18, r18
     eb6:	33 1f       	adc	r19, r19
     eb8:	44 1f       	adc	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	16 95       	lsr	r17
     ebe:	07 95       	ror	r16
     ec0:	f7 94       	ror	r15
     ec2:	e7 94       	ror	r14
     ec4:	61 50       	subi	r22, 0x01	; 1
     ec6:	70 40       	sbci	r23, 0x00	; 0
     ec8:	77 fd       	sbrc	r23, 7
     eca:	36 c0       	rjmp	.+108    	; 0xf38 <__mulsf3+0x12e>
     ecc:	d8 01       	movw	r26, r16
     ece:	c7 01       	movw	r24, r14
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	a0 70       	andi	r26, 0x00	; 0
     ed6:	b0 70       	andi	r27, 0x00	; 0
     ed8:	89 2b       	or	r24, r25
     eda:	c9 f0       	breq	.+50     	; 0xf0e <__mulsf3+0x104>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	22 0e       	add	r2, r18
     ee2:	33 1e       	adc	r3, r19
     ee4:	44 1e       	adc	r4, r20
     ee6:	55 1e       	adc	r5, r21
     ee8:	22 16       	cp	r2, r18
     eea:	33 06       	cpc	r3, r19
     eec:	44 06       	cpc	r4, r20
     eee:	55 06       	cpc	r5, r21
     ef0:	10 f4       	brcc	.+4      	; 0xef6 <__mulsf3+0xec>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	aa 27       	eor	r26, r26
     ef8:	97 fd       	sbrc	r25, 7
     efa:	a0 95       	com	r26
     efc:	ba 2f       	mov	r27, r26
     efe:	8a 0d       	add	r24, r10
     f00:	9b 1d       	adc	r25, r11
     f02:	ac 1d       	adc	r26, r12
     f04:	bd 1d       	adc	r27, r13
     f06:	68 0e       	add	r6, r24
     f08:	79 1e       	adc	r7, r25
     f0a:	8a 1e       	adc	r8, r26
     f0c:	9b 1e       	adc	r9, r27
     f0e:	aa 0c       	add	r10, r10
     f10:	bb 1c       	adc	r11, r11
     f12:	cc 1c       	adc	r12, r12
     f14:	dd 1c       	adc	r13, r13
     f16:	57 ff       	sbrs	r21, 7
     f18:	cd cf       	rjmp	.-102    	; 0xeb4 <__mulsf3+0xaa>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	a8 2a       	or	r10, r24
     f24:	b9 2a       	or	r11, r25
     f26:	ca 2a       	or	r12, r26
     f28:	db 2a       	or	r13, r27
     f2a:	c4 cf       	rjmp	.-120    	; 0xeb4 <__mulsf3+0xaa>
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__mulsf3+0x128>
     f30:	95 cf       	rjmp	.-214    	; 0xe5c <__mulsf3+0x52>
     f32:	61 e8       	ldi	r22, 0x81	; 129
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	76 c0       	rjmp	.+236    	; 0x1024 <__mulsf3+0x21a>
     f38:	22 81       	ldd	r18, Z+2	; 0x02
     f3a:	33 81       	ldd	r19, Z+3	; 0x03
     f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f40:	28 0f       	add	r18, r24
     f42:	39 1f       	adc	r19, r25
     f44:	2e 5f       	subi	r18, 0xFE	; 254
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	a9 01       	movw	r20, r18
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f50:	98 13       	cpse	r25, r24
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	6a 8b       	std	Y+18, r22	; 0x12
     f56:	97 fe       	sbrs	r9, 7
     f58:	0f c0       	rjmp	.+30     	; 0xf78 <__mulsf3+0x16e>
     f5a:	2f c0       	rjmp	.+94     	; 0xfba <__mulsf3+0x1b0>
     f5c:	ca 01       	movw	r24, r20
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	ac 01       	movw	r20, r24
     f62:	9c 01       	movw	r18, r24
     f64:	66 0c       	add	r6, r6
     f66:	77 1c       	adc	r7, r7
     f68:	88 1c       	adc	r8, r8
     f6a:	99 1c       	adc	r9, r9
     f6c:	57 fc       	sbrc	r5, 7
     f6e:	41 c0       	rjmp	.+130    	; 0xff2 <__mulsf3+0x1e8>
     f70:	22 0c       	add	r2, r2
     f72:	33 1c       	adc	r3, r3
     f74:	44 1c       	adc	r4, r4
     f76:	55 1c       	adc	r5, r5
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	69 16       	cp	r6, r25
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	79 06       	cpc	r7, r25
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	89 06       	cpc	r8, r25
     f84:	90 e4       	ldi	r25, 0x40	; 64
     f86:	99 06       	cpc	r9, r25
     f88:	48 f3       	brcs	.-46     	; 0xf5c <__mulsf3+0x152>
     f8a:	3c 8b       	std	Y+20, r19	; 0x14
     f8c:	2b 8b       	std	Y+19, r18	; 0x13
     f8e:	d4 01       	movw	r26, r8
     f90:	c3 01       	movw	r24, r6
     f92:	8f 77       	andi	r24, 0x7F	; 127
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	a0 70       	andi	r26, 0x00	; 0
     f98:	b0 70       	andi	r27, 0x00	; 0
     f9a:	80 34       	cpi	r24, 0x40	; 64
     f9c:	91 05       	cpc	r25, r1
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	81 f1       	breq	.+96     	; 0x1004 <__mulsf3+0x1fa>
     fa4:	6d 8a       	std	Y+21, r6	; 0x15
     fa6:	7e 8a       	std	Y+22, r7	; 0x16
     fa8:	8f 8a       	std	Y+23, r8	; 0x17
     faa:	98 8e       	std	Y+24, r9	; 0x18
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	89 8b       	std	Y+17, r24	; 0x11
     fb0:	61 e1       	ldi	r22, 0x11	; 17
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	6c 0f       	add	r22, r28
     fb6:	7d 1f       	adc	r23, r29
     fb8:	35 c0       	rjmp	.+106    	; 0x1024 <__mulsf3+0x21a>
     fba:	2f 5f       	subi	r18, 0xFF	; 255
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	a9 01       	movw	r20, r18
     fc0:	d4 01       	movw	r26, r8
     fc2:	c3 01       	movw	r24, r6
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	90 70       	andi	r25, 0x00	; 0
     fc8:	a0 70       	andi	r26, 0x00	; 0
     fca:	b0 70       	andi	r27, 0x00	; 0
     fcc:	89 2b       	or	r24, r25
     fce:	61 f0       	breq	.+24     	; 0xfe8 <__mulsf3+0x1de>
     fd0:	56 94       	lsr	r5
     fd2:	47 94       	ror	r4
     fd4:	37 94       	ror	r3
     fd6:	27 94       	ror	r2
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e8       	ldi	r27, 0x80	; 128
     fe0:	28 2a       	or	r2, r24
     fe2:	39 2a       	or	r3, r25
     fe4:	4a 2a       	or	r4, r26
     fe6:	5b 2a       	or	r5, r27
     fe8:	96 94       	lsr	r9
     fea:	87 94       	ror	r8
     fec:	77 94       	ror	r7
     fee:	67 94       	ror	r6
     ff0:	c3 cf       	rjmp	.-122    	; 0xf78 <__mulsf3+0x16e>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	68 2a       	or	r6, r24
     ffc:	79 2a       	or	r7, r25
     ffe:	8a 2a       	or	r8, r26
    1000:	9b 2a       	or	r9, r27
    1002:	b6 cf       	rjmp	.-148    	; 0xf70 <__mulsf3+0x166>
    1004:	67 fc       	sbrc	r6, 7
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <__mulsf3+0x208>
    1008:	21 14       	cp	r2, r1
    100a:	31 04       	cpc	r3, r1
    100c:	41 04       	cpc	r4, r1
    100e:	51 04       	cpc	r5, r1
    1010:	49 f2       	breq	.-110    	; 0xfa4 <__mulsf3+0x19a>
    1012:	80 e4       	ldi	r24, 0x40	; 64
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	68 0e       	add	r6, r24
    101c:	79 1e       	adc	r7, r25
    101e:	8a 1e       	adc	r8, r26
    1020:	9b 1e       	adc	r9, r27
    1022:	c0 cf       	rjmp	.-128    	; 0xfa4 <__mulsf3+0x19a>
    1024:	cb 01       	movw	r24, r22
    1026:	e8 d0       	rcall	.+464    	; 0x11f8 <__pack_f>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	e2 e1       	ldi	r30, 0x12	; 18
    1032:	a0 96       	adiw	r28, 0x20	; 32
    1034:	06 c3       	rjmp	.+1548   	; 0x1642 <__epilogue_restores__>

00001036 <__gesf2>:
    1036:	a8 e1       	ldi	r26, 0x18	; 24
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e0 e2       	ldi	r30, 0x20	; 32
    103c:	f8 e0       	ldi	r31, 0x08	; 8
    103e:	f3 c2       	rjmp	.+1510   	; 0x1626 <__prologue_saves__+0x1c>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	89 8b       	std	Y+17, r24	; 0x11
    1046:	9a 8b       	std	Y+18, r25	; 0x12
    1048:	ab 8b       	std	Y+19, r26	; 0x13
    104a:	bc 8b       	std	Y+20, r27	; 0x14
    104c:	2d 8b       	std	Y+21, r18	; 0x15
    104e:	3e 8b       	std	Y+22, r19	; 0x16
    1050:	4f 8b       	std	Y+23, r20	; 0x17
    1052:	58 8f       	std	Y+24, r21	; 0x18
    1054:	be 01       	movw	r22, r28
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	ce 01       	movw	r24, r28
    105c:	41 96       	adiw	r24, 0x11	; 17
    105e:	b2 d1       	rcall	.+868    	; 0x13c4 <__unpack_f>
    1060:	8e 01       	movw	r16, r28
    1062:	07 5f       	subi	r16, 0xF7	; 247
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	b8 01       	movw	r22, r16
    1068:	ce 01       	movw	r24, r28
    106a:	45 96       	adiw	r24, 0x15	; 21
    106c:	ab d1       	rcall	.+854    	; 0x13c4 <__unpack_f>
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	18 f0       	brcs	.+6      	; 0x107a <__gesf2+0x44>
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	18 f4       	brcc	.+6      	; 0x1080 <__gesf2+0x4a>
    107a:	2f ef       	ldi	r18, 0xFF	; 255
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <__gesf2+0x5a>
    1080:	b8 01       	movw	r22, r16
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	18 d2       	rcall	.+1072   	; 0x14b8 <__fpcmp_parts_f>
    1088:	28 2f       	mov	r18, r24
    108a:	33 27       	eor	r19, r19
    108c:	27 fd       	sbrc	r18, 7
    108e:	30 95       	com	r19
    1090:	c9 01       	movw	r24, r18
    1092:	e4 e0       	ldi	r30, 0x04	; 4
    1094:	68 96       	adiw	r28, 0x18	; 24
    1096:	e3 c2       	rjmp	.+1478   	; 0x165e <__epilogue_restores__+0x1c>

00001098 <__floatsisf>:
    1098:	a8 e0       	ldi	r26, 0x08	; 8
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e5       	ldi	r30, 0x51	; 81
    109e:	f8 e0       	ldi	r31, 0x08	; 8
    10a0:	c0 c2       	rjmp	.+1408   	; 0x1622 <__prologue_saves__+0x18>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	7b 01       	movw	r14, r22
    10a8:	8c 01       	movw	r16, r24
    10aa:	ee 24       	eor	r14, r14
    10ac:	17 fd       	sbrc	r17, 7
    10ae:	e3 94       	inc	r14
    10b0:	ff 24       	eor	r15, r15
    10b2:	00 27       	eor	r16, r16
    10b4:	11 27       	eor	r17, r17
    10b6:	ea 82       	std	Y+2, r14	; 0x02
    10b8:	21 15       	cp	r18, r1
    10ba:	31 05       	cpc	r19, r1
    10bc:	41 05       	cpc	r20, r1
    10be:	51 05       	cpc	r21, r1
    10c0:	31 f4       	brne	.+12     	; 0x10ce <__floatsisf+0x36>
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	ce 01       	movw	r24, r28
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	96 d0       	rcall	.+300    	; 0x11f8 <__pack_f>
    10cc:	43 c0       	rjmp	.+134    	; 0x1154 <__floatsisf+0xbc>
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	6e e1       	ldi	r22, 0x1E	; 30
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	cb 01       	movw	r24, r22
    10d8:	ee 20       	and	r14, r14
    10da:	31 f5       	brne	.+76     	; 0x1128 <__floatsisf+0x90>
    10dc:	79 01       	movw	r14, r18
    10de:	8a 01       	movw	r16, r20
    10e0:	a8 01       	movw	r20, r16
    10e2:	97 01       	movw	r18, r14
    10e4:	20 30       	cpi	r18, 0x00	; 0
    10e6:	e0 e0       	ldi	r30, 0x00	; 0
    10e8:	3e 07       	cpc	r19, r30
    10ea:	e0 e0       	ldi	r30, 0x00	; 0
    10ec:	4e 07       	cpc	r20, r30
    10ee:	e0 e4       	ldi	r30, 0x40	; 64
    10f0:	5e 07       	cpc	r21, r30
    10f2:	98 f4       	brcc	.+38     	; 0x111a <__floatsisf+0x82>
    10f4:	79 01       	movw	r14, r18
    10f6:	8a 01       	movw	r16, r20
    10f8:	ee 0c       	add	r14, r14
    10fa:	ff 1c       	adc	r15, r15
    10fc:	00 1f       	adc	r16, r16
    10fe:	11 1f       	adc	r17, r17
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	bc 01       	movw	r22, r24
    1104:	a8 01       	movw	r20, r16
    1106:	97 01       	movw	r18, r14
    1108:	e0 e0       	ldi	r30, 0x00	; 0
    110a:	ee 16       	cp	r14, r30
    110c:	e0 e0       	ldi	r30, 0x00	; 0
    110e:	fe 06       	cpc	r15, r30
    1110:	e0 e0       	ldi	r30, 0x00	; 0
    1112:	0e 07       	cpc	r16, r30
    1114:	e0 e4       	ldi	r30, 0x40	; 64
    1116:	1e 07       	cpc	r17, r30
    1118:	68 f3       	brcs	.-38     	; 0x10f4 <__floatsisf+0x5c>
    111a:	ed 82       	std	Y+5, r14	; 0x05
    111c:	fe 82       	std	Y+6, r15	; 0x06
    111e:	0f 83       	std	Y+7, r16	; 0x07
    1120:	18 87       	std	Y+8, r17	; 0x08
    1122:	7c 83       	std	Y+4, r23	; 0x04
    1124:	6b 83       	std	Y+3, r22	; 0x03
    1126:	cf cf       	rjmp	.-98     	; 0x10c6 <__floatsisf+0x2e>
    1128:	20 30       	cpi	r18, 0x00	; 0
    112a:	e0 e0       	ldi	r30, 0x00	; 0
    112c:	3e 07       	cpc	r19, r30
    112e:	e0 e0       	ldi	r30, 0x00	; 0
    1130:	4e 07       	cpc	r20, r30
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	5e 07       	cpc	r21, r30
    1136:	41 f0       	breq	.+16     	; 0x1148 <__floatsisf+0xb0>
    1138:	ee 24       	eor	r14, r14
    113a:	ff 24       	eor	r15, r15
    113c:	87 01       	movw	r16, r14
    113e:	e2 1a       	sub	r14, r18
    1140:	f3 0a       	sbc	r15, r19
    1142:	04 0b       	sbc	r16, r20
    1144:	15 0b       	sbc	r17, r21
    1146:	cc cf       	rjmp	.-104    	; 0x10e0 <__floatsisf+0x48>
    1148:	7c 83       	std	Y+4, r23	; 0x04
    114a:	6b 83       	std	Y+3, r22	; 0x03
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	9f ec       	ldi	r25, 0xCF	; 207
    1154:	e6 e0       	ldi	r30, 0x06	; 6
    1156:	28 96       	adiw	r28, 0x08	; 8
    1158:	80 c2       	rjmp	.+1280   	; 0x165a <__epilogue_restores__+0x18>

0000115a <__fixsfsi>:
    115a:	ac e0       	ldi	r26, 0x0C	; 12
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e2 eb       	ldi	r30, 0xB2	; 178
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	63 c2       	rjmp	.+1222   	; 0x162a <__prologue_saves__+0x20>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	89 87       	std	Y+9, r24	; 0x09
    116a:	9a 87       	std	Y+10, r25	; 0x0a
    116c:	ab 87       	std	Y+11, r26	; 0x0b
    116e:	bc 87       	std	Y+12, r27	; 0x0c
    1170:	be 01       	movw	r22, r28
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	ce 01       	movw	r24, r28
    1178:	09 96       	adiw	r24, 0x09	; 9
    117a:	24 d1       	rcall	.+584    	; 0x13c4 <__unpack_f>
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	11 f0       	breq	.+4      	; 0x1186 <__fixsfsi+0x2c>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	28 f4       	brcc	.+10     	; 0x1190 <__fixsfsi+0x36>
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	31 c0       	rjmp	.+98     	; 0x11f2 <__fixsfsi+0x98>
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	39 f0       	breq	.+14     	; 0x11a2 <__fixsfsi+0x48>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	37 fd       	sbrc	r19, 7
    119a:	f5 cf       	rjmp	.-22     	; 0x1186 <__fixsfsi+0x2c>
    119c:	2f 31       	cpi	r18, 0x1F	; 31
    119e:	31 05       	cpc	r19, r1
    11a0:	6c f0       	brlt	.+26     	; 0x11bc <__fixsfsi+0x62>
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 23       	and	r24, r24
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <__fixsfsi+0x58>
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e8       	ldi	r25, 0x80	; 128
    11b0:	20 c0       	rjmp	.+64     	; 0x11f2 <__fixsfsi+0x98>
    11b2:	6f ef       	ldi	r22, 0xFF	; 255
    11b4:	7f ef       	ldi	r23, 0xFF	; 255
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	9f e7       	ldi	r25, 0x7F	; 127
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <__fixsfsi+0x98>
    11bc:	8e e1       	ldi	r24, 0x1E	; 30
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	82 1b       	sub	r24, r18
    11c2:	93 0b       	sbc	r25, r19
    11c4:	2d 81       	ldd	r18, Y+5	; 0x05
    11c6:	3e 81       	ldd	r19, Y+6	; 0x06
    11c8:	4f 81       	ldd	r20, Y+7	; 0x07
    11ca:	58 85       	ldd	r21, Y+8	; 0x08
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <__fixsfsi+0x7c>
    11ce:	56 95       	lsr	r21
    11d0:	47 95       	ror	r20
    11d2:	37 95       	ror	r19
    11d4:	27 95       	ror	r18
    11d6:	8a 95       	dec	r24
    11d8:	d2 f7       	brpl	.-12     	; 0x11ce <__fixsfsi+0x74>
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 23       	and	r24, r24
    11de:	39 f0       	breq	.+14     	; 0x11ee <__fixsfsi+0x94>
    11e0:	50 95       	com	r21
    11e2:	40 95       	com	r20
    11e4:	30 95       	com	r19
    11e6:	21 95       	neg	r18
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	4f 4f       	sbci	r20, 0xFF	; 255
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	ca 01       	movw	r24, r20
    11f0:	b9 01       	movw	r22, r18
    11f2:	e2 e0       	ldi	r30, 0x02	; 2
    11f4:	2c 96       	adiw	r28, 0x0c	; 12
    11f6:	35 c2       	rjmp	.+1130   	; 0x1662 <__epilogue_restores__+0x20>

000011f8 <__pack_f>:
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e1 e0       	ldi	r30, 0x01	; 1
    11fe:	f9 e0       	ldi	r31, 0x09	; 9
    1200:	0a c2       	rjmp	.+1044   	; 0x1616 <__prologue_saves__+0xc>
    1202:	88 24       	eor	r8, r8
    1204:	99 24       	eor	r9, r9
    1206:	54 01       	movw	r10, r8
    1208:	dc 01       	movw	r26, r24
    120a:	fc 01       	movw	r30, r24
    120c:	24 81       	ldd	r18, Z+4	; 0x04
    120e:	35 81       	ldd	r19, Z+5	; 0x05
    1210:	46 81       	ldd	r20, Z+6	; 0x06
    1212:	57 81       	ldd	r21, Z+7	; 0x07
    1214:	81 81       	ldd	r24, Z+1	; 0x01
    1216:	08 2f       	mov	r16, r24
    1218:	11 27       	eor	r17, r17
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	8c 91       	ld	r24, X
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	20 f4       	brcc	.+8      	; 0x122c <__pack_f+0x34>
    1224:	6f ef       	ldi	r22, 0xFF	; 255
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	40 61       	ori	r20, 0x10	; 16
    122a:	a4 c0       	rjmp	.+328    	; 0x1374 <__pack_f+0x17c>
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	09 f4       	brne	.+2      	; 0x1232 <__pack_f+0x3a>
    1230:	64 c0       	rjmp	.+200    	; 0x12fa <__pack_f+0x102>
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	09 f4       	brne	.+2      	; 0x1238 <__pack_f+0x40>
    1236:	63 c0       	rjmp	.+198    	; 0x12fe <__pack_f+0x106>
    1238:	21 15       	cp	r18, r1
    123a:	31 05       	cpc	r19, r1
    123c:	41 05       	cpc	r20, r1
    123e:	51 05       	cpc	r21, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <__pack_f+0x4c>
    1242:	98 c0       	rjmp	.+304    	; 0x1374 <__pack_f+0x17c>
    1244:	fd 01       	movw	r30, r26
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	ff ef       	ldi	r31, 0xFF	; 255
    124c:	82 38       	cpi	r24, 0x82	; 130
    124e:	9f 07       	cpc	r25, r31
    1250:	0c f0       	brlt	.+2      	; 0x1254 <__pack_f+0x5c>
    1252:	50 c0       	rjmp	.+160    	; 0x12f4 <__pack_f+0xfc>
    1254:	a2 e8       	ldi	r26, 0x82	; 130
    1256:	ea 2e       	mov	r14, r26
    1258:	af ef       	ldi	r26, 0xFF	; 255
    125a:	fa 2e       	mov	r15, r26
    125c:	e8 1a       	sub	r14, r24
    125e:	f9 0a       	sbc	r15, r25
    1260:	8a e1       	ldi	r24, 0x1A	; 26
    1262:	e8 16       	cp	r14, r24
    1264:	f1 04       	cpc	r15, r1
    1266:	0c f0       	brlt	.+2      	; 0x126a <__pack_f+0x72>
    1268:	6b c0       	rjmp	.+214    	; 0x1340 <__pack_f+0x148>
    126a:	6b 01       	movw	r12, r22
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	0e 2c       	mov	r0, r14
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <__pack_f+0x88>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	aa 1f       	adc	r26, r26
    127e:	bb 1f       	adc	r27, r27
    1280:	0a 94       	dec	r0
    1282:	d2 f7       	brpl	.-12     	; 0x1278 <__pack_f+0x80>
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	a1 09       	sbc	r26, r1
    1288:	b1 09       	sbc	r27, r1
    128a:	82 23       	and	r24, r18
    128c:	93 23       	and	r25, r19
    128e:	a4 23       	and	r26, r20
    1290:	b5 23       	and	r27, r21
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	a1 05       	cpc	r26, r1
    1296:	b1 05       	cpc	r27, r1
    1298:	19 f0       	breq	.+6      	; 0x12a0 <__pack_f+0xa8>
    129a:	f1 e0       	ldi	r31, 0x01	; 1
    129c:	cf 2e       	mov	r12, r31
    129e:	d1 2c       	mov	r13, r1
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <__pack_f+0xb2>
    12a2:	56 95       	lsr	r21
    12a4:	47 95       	ror	r20
    12a6:	37 95       	ror	r19
    12a8:	27 95       	ror	r18
    12aa:	ea 94       	dec	r14
    12ac:	d2 f7       	brpl	.-12     	; 0x12a2 <__pack_f+0xaa>
    12ae:	c6 01       	movw	r24, r12
    12b0:	aa 27       	eor	r26, r26
    12b2:	97 fd       	sbrc	r25, 7
    12b4:	a0 95       	com	r26
    12b6:	ba 2f       	mov	r27, r26
    12b8:	28 2b       	or	r18, r24
    12ba:	39 2b       	or	r19, r25
    12bc:	4a 2b       	or	r20, r26
    12be:	5b 2b       	or	r21, r27
    12c0:	da 01       	movw	r26, r20
    12c2:	c9 01       	movw	r24, r18
    12c4:	8f 77       	andi	r24, 0x7F	; 127
    12c6:	90 70       	andi	r25, 0x00	; 0
    12c8:	a0 70       	andi	r26, 0x00	; 0
    12ca:	b0 70       	andi	r27, 0x00	; 0
    12cc:	80 34       	cpi	r24, 0x40	; 64
    12ce:	91 05       	cpc	r25, r1
    12d0:	a1 05       	cpc	r26, r1
    12d2:	b1 05       	cpc	r27, r1
    12d4:	d1 f1       	breq	.+116    	; 0x134a <__pack_f+0x152>
    12d6:	21 5c       	subi	r18, 0xC1	; 193
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	4f 4f       	sbci	r20, 0xFF	; 255
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	20 30       	cpi	r18, 0x00	; 0
    12e0:	e0 e0       	ldi	r30, 0x00	; 0
    12e2:	3e 07       	cpc	r19, r30
    12e4:	e0 e0       	ldi	r30, 0x00	; 0
    12e6:	4e 07       	cpc	r20, r30
    12e8:	e0 e4       	ldi	r30, 0x40	; 64
    12ea:	5e 07       	cpc	r21, r30
    12ec:	08 f1       	brcs	.+66     	; 0x1330 <__pack_f+0x138>
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	1e c0       	rjmp	.+60     	; 0x1330 <__pack_f+0x138>
    12f4:	80 38       	cpi	r24, 0x80	; 128
    12f6:	91 05       	cpc	r25, r1
    12f8:	3c f0       	brlt	.+14     	; 0x1308 <__pack_f+0x110>
    12fa:	6f ef       	ldi	r22, 0xFF	; 255
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	36 c0       	rjmp	.+108    	; 0x1374 <__pack_f+0x17c>
    1308:	bc 01       	movw	r22, r24
    130a:	61 58       	subi	r22, 0x81	; 129
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	da 01       	movw	r26, r20
    1310:	c9 01       	movw	r24, r18
    1312:	8f 77       	andi	r24, 0x7F	; 127
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	a0 70       	andi	r26, 0x00	; 0
    1318:	b0 70       	andi	r27, 0x00	; 0
    131a:	80 34       	cpi	r24, 0x40	; 64
    131c:	91 05       	cpc	r25, r1
    131e:	a1 05       	cpc	r26, r1
    1320:	b1 05       	cpc	r27, r1
    1322:	d1 f0       	breq	.+52     	; 0x1358 <__pack_f+0x160>
    1324:	21 5c       	subi	r18, 0xC1	; 193
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	4f 4f       	sbci	r20, 0xFF	; 255
    132a:	5f 4f       	sbci	r21, 0xFF	; 255
    132c:	57 fd       	sbrc	r21, 7
    132e:	1b c0       	rjmp	.+54     	; 0x1366 <__pack_f+0x16e>
    1330:	97 e0       	ldi	r25, 0x07	; 7
    1332:	56 95       	lsr	r21
    1334:	47 95       	ror	r20
    1336:	37 95       	ror	r19
    1338:	27 95       	ror	r18
    133a:	9a 95       	dec	r25
    133c:	d1 f7       	brne	.-12     	; 0x1332 <__pack_f+0x13a>
    133e:	1a c0       	rjmp	.+52     	; 0x1374 <__pack_f+0x17c>
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	bb cf       	rjmp	.-138    	; 0x12c0 <__pack_f+0xc8>
    134a:	27 ff       	sbrs	r18, 7
    134c:	c8 cf       	rjmp	.-112    	; 0x12de <__pack_f+0xe6>
    134e:	20 5c       	subi	r18, 0xC0	; 192
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	4f 4f       	sbci	r20, 0xFF	; 255
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    1356:	c3 cf       	rjmp	.-122    	; 0x12de <__pack_f+0xe6>
    1358:	27 ff       	sbrs	r18, 7
    135a:	e8 cf       	rjmp	.-48     	; 0x132c <__pack_f+0x134>
    135c:	20 5c       	subi	r18, 0xC0	; 192
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	4f 4f       	sbci	r20, 0xFF	; 255
    1362:	5f 4f       	sbci	r21, 0xFF	; 255
    1364:	e3 cf       	rjmp	.-58     	; 0x132c <__pack_f+0x134>
    1366:	56 95       	lsr	r21
    1368:	47 95       	ror	r20
    136a:	37 95       	ror	r19
    136c:	27 95       	ror	r18
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	de cf       	rjmp	.-68     	; 0x1330 <__pack_f+0x138>
    1374:	82 2e       	mov	r8, r18
    1376:	93 2e       	mov	r9, r19
    1378:	94 2f       	mov	r25, r20
    137a:	9f 77       	andi	r25, 0x7F	; 127
    137c:	8a 2d       	mov	r24, r10
    137e:	80 78       	andi	r24, 0x80	; 128
    1380:	a8 2e       	mov	r10, r24
    1382:	a9 2a       	or	r10, r25
    1384:	96 2f       	mov	r25, r22
    1386:	97 95       	ror	r25
    1388:	99 27       	eor	r25, r25
    138a:	97 95       	ror	r25
    138c:	8a 2d       	mov	r24, r10
    138e:	8f 77       	andi	r24, 0x7F	; 127
    1390:	a8 2e       	mov	r10, r24
    1392:	a9 2a       	or	r10, r25
    1394:	76 95       	lsr	r23
    1396:	67 95       	ror	r22
    1398:	96 2f       	mov	r25, r22
    139a:	9f 77       	andi	r25, 0x7F	; 127
    139c:	8b 2d       	mov	r24, r11
    139e:	80 78       	andi	r24, 0x80	; 128
    13a0:	b8 2e       	mov	r11, r24
    13a2:	b9 2a       	or	r11, r25
    13a4:	90 2f       	mov	r25, r16
    13a6:	97 95       	ror	r25
    13a8:	99 27       	eor	r25, r25
    13aa:	97 95       	ror	r25
    13ac:	8b 2d       	mov	r24, r11
    13ae:	8f 77       	andi	r24, 0x7F	; 127
    13b0:	b8 2e       	mov	r11, r24
    13b2:	b9 2a       	or	r11, r25
    13b4:	d5 01       	movw	r26, r10
    13b6:	c4 01       	movw	r24, r8
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	ec e0       	ldi	r30, 0x0C	; 12
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	45 c1       	rjmp	.+650    	; 0x164e <__epilogue_restores__+0xc>

000013c4 <__unpack_f>:
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	fc 01       	movw	r30, r24
    13ca:	db 01       	movw	r26, r22
    13cc:	40 81       	ld	r20, Z
    13ce:	51 81       	ldd	r21, Z+1	; 0x01
    13d0:	22 81       	ldd	r18, Z+2	; 0x02
    13d2:	62 2f       	mov	r22, r18
    13d4:	6f 77       	andi	r22, 0x7F	; 127
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	22 1f       	adc	r18, r18
    13da:	22 27       	eor	r18, r18
    13dc:	22 1f       	adc	r18, r18
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	89 2f       	mov	r24, r25
    13e2:	88 0f       	add	r24, r24
    13e4:	82 2b       	or	r24, r18
    13e6:	28 2f       	mov	r18, r24
    13e8:	33 27       	eor	r19, r19
    13ea:	99 1f       	adc	r25, r25
    13ec:	99 27       	eor	r25, r25
    13ee:	99 1f       	adc	r25, r25
    13f0:	ed 01       	movw	r28, r26
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	21 15       	cp	r18, r1
    13f6:	31 05       	cpc	r19, r1
    13f8:	41 f4       	brne	.+16     	; 0x140a <__unpack_f+0x46>
    13fa:	41 15       	cp	r20, r1
    13fc:	51 05       	cpc	r21, r1
    13fe:	61 05       	cpc	r22, r1
    1400:	71 05       	cpc	r23, r1
    1402:	e1 f4       	brne	.+56     	; 0x143c <__unpack_f+0x78>
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	8c 93       	st	X, r24
    1408:	54 c0       	rjmp	.+168    	; 0x14b2 <__unpack_f+0xee>
    140a:	2f 3f       	cpi	r18, 0xFF	; 255
    140c:	31 05       	cpc	r19, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <__unpack_f+0x4e>
    1410:	41 c0       	rjmp	.+130    	; 0x1494 <__unpack_f+0xd0>
    1412:	2f 57       	subi	r18, 0x7F	; 127
    1414:	30 40       	sbci	r19, 0x00	; 0
    1416:	fd 01       	movw	r30, r26
    1418:	33 83       	std	Z+3, r19	; 0x03
    141a:	22 83       	std	Z+2, r18	; 0x02
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	8c 93       	st	X, r24
    1420:	87 e0       	ldi	r24, 0x07	; 7
    1422:	44 0f       	add	r20, r20
    1424:	55 1f       	adc	r21, r21
    1426:	66 1f       	adc	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	8a 95       	dec	r24
    142c:	d1 f7       	brne	.-12     	; 0x1422 <__unpack_f+0x5e>
    142e:	70 64       	ori	r23, 0x40	; 64
    1430:	ed 01       	movw	r28, r26
    1432:	4c 83       	std	Y+4, r20	; 0x04
    1434:	5d 83       	std	Y+5, r21	; 0x05
    1436:	6e 83       	std	Y+6, r22	; 0x06
    1438:	7f 83       	std	Y+7, r23	; 0x07
    143a:	3b c0       	rjmp	.+118    	; 0x14b2 <__unpack_f+0xee>
    143c:	22 e8       	ldi	r18, 0x82	; 130
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	f9 01       	movw	r30, r18
    1442:	c7 e0       	ldi	r28, 0x07	; 7
    1444:	44 0f       	add	r20, r20
    1446:	55 1f       	adc	r21, r21
    1448:	66 1f       	adc	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	ca 95       	dec	r28
    144e:	d1 f7       	brne	.-12     	; 0x1444 <__unpack_f+0x80>
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	8c 93       	st	X, r24
    1454:	40 30       	cpi	r20, 0x00	; 0
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	58 07       	cpc	r21, r24
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	68 07       	cpc	r22, r24
    145e:	80 e4       	ldi	r24, 0x40	; 64
    1460:	78 07       	cpc	r23, r24
    1462:	78 f4       	brcc	.+30     	; 0x1482 <__unpack_f+0xbe>
    1464:	44 0f       	add	r20, r20
    1466:	55 1f       	adc	r21, r21
    1468:	66 1f       	adc	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	21 50       	subi	r18, 0x01	; 1
    146e:	30 40       	sbci	r19, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	40 30       	cpi	r20, 0x00	; 0
    1474:	c0 e0       	ldi	r28, 0x00	; 0
    1476:	5c 07       	cpc	r21, r28
    1478:	c0 e0       	ldi	r28, 0x00	; 0
    147a:	6c 07       	cpc	r22, r28
    147c:	c0 e4       	ldi	r28, 0x40	; 64
    147e:	7c 07       	cpc	r23, r28
    1480:	88 f3       	brcs	.-30     	; 0x1464 <__unpack_f+0xa0>
    1482:	ed 01       	movw	r28, r26
    1484:	fb 83       	std	Y+3, r31	; 0x03
    1486:	ea 83       	std	Y+2, r30	; 0x02
    1488:	fd 01       	movw	r30, r26
    148a:	44 83       	std	Z+4, r20	; 0x04
    148c:	55 83       	std	Z+5, r21	; 0x05
    148e:	66 83       	std	Z+6, r22	; 0x06
    1490:	77 83       	std	Z+7, r23	; 0x07
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <__unpack_f+0xee>
    1494:	41 15       	cp	r20, r1
    1496:	51 05       	cpc	r21, r1
    1498:	61 05       	cpc	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	19 f4       	brne	.+6      	; 0x14a4 <__unpack_f+0xe0>
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	8c 93       	st	X, r24
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <__unpack_f+0xee>
    14a4:	64 ff       	sbrs	r22, 4
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <__unpack_f+0xea>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	8c 93       	st	X, r24
    14ac:	c1 cf       	rjmp	.-126    	; 0x1430 <__unpack_f+0x6c>
    14ae:	1c 92       	st	X, r1
    14b0:	bf cf       	rjmp	.-130    	; 0x1430 <__unpack_f+0x6c>
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <__fpcmp_parts_f>:
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	fc 01       	movw	r30, r24
    14c2:	db 01       	movw	r26, r22
    14c4:	80 81       	ld	r24, Z
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	18 f0       	brcs	.+6      	; 0x14d0 <__fpcmp_parts_f+0x18>
    14ca:	9c 91       	ld	r25, X
    14cc:	92 30       	cpi	r25, 0x02	; 2
    14ce:	18 f4       	brcc	.+6      	; 0x14d6 <__fpcmp_parts_f+0x1e>
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	5e c0       	rjmp	.+188    	; 0x1592 <__fpcmp_parts_f+0xda>
    14d6:	84 30       	cpi	r24, 0x04	; 4
    14d8:	c1 f0       	breq	.+48     	; 0x150a <__fpcmp_parts_f+0x52>
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	01 f1       	breq	.+64     	; 0x151e <__fpcmp_parts_f+0x66>
    14de:	94 30       	cpi	r25, 0x04	; 4
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <__fpcmp_parts_f+0x2c>
    14e2:	47 c0       	rjmp	.+142    	; 0x1572 <__fpcmp_parts_f+0xba>
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	09 f4       	brne	.+2      	; 0x14ea <__fpcmp_parts_f+0x32>
    14e8:	4b c0       	rjmp	.+150    	; 0x1580 <__fpcmp_parts_f+0xc8>
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <__fpcmp_parts_f+0x38>
    14ee:	4e c0       	rjmp	.+156    	; 0x158c <__fpcmp_parts_f+0xd4>
    14f0:	92 30       	cpi	r25, 0x02	; 2
    14f2:	a9 f0       	breq	.+42     	; 0x151e <__fpcmp_parts_f+0x66>
    14f4:	41 81       	ldd	r20, Z+1	; 0x01
    14f6:	ed 01       	movw	r28, r26
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	48 17       	cp	r20, r24
    14fc:	b9 f0       	breq	.+46     	; 0x152c <__fpcmp_parts_f+0x74>
    14fe:	44 23       	and	r20, r20
    1500:	89 f0       	breq	.+34     	; 0x1524 <__fpcmp_parts_f+0x6c>
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	bc 01       	movw	r22, r24
    1508:	44 c0       	rjmp	.+136    	; 0x1592 <__fpcmp_parts_f+0xda>
    150a:	94 30       	cpi	r25, 0x04	; 4
    150c:	31 f7       	brne	.-52     	; 0x14da <__fpcmp_parts_f+0x22>
    150e:	eb 01       	movw	r28, r22
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	68 2f       	mov	r22, r24
    1514:	77 27       	eor	r23, r23
    1516:	81 81       	ldd	r24, Z+1	; 0x01
    1518:	68 1b       	sub	r22, r24
    151a:	71 09       	sbc	r23, r1
    151c:	3a c0       	rjmp	.+116    	; 0x1592 <__fpcmp_parts_f+0xda>
    151e:	81 81       	ldd	r24, Z+1	; 0x01
    1520:	88 23       	and	r24, r24
    1522:	79 f7       	brne	.-34     	; 0x1502 <__fpcmp_parts_f+0x4a>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	bc 01       	movw	r22, r24
    152a:	33 c0       	rjmp	.+102    	; 0x1592 <__fpcmp_parts_f+0xda>
    152c:	22 81       	ldd	r18, Z+2	; 0x02
    152e:	33 81       	ldd	r19, Z+3	; 0x03
    1530:	ed 01       	movw	r28, r26
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	82 17       	cp	r24, r18
    1538:	93 07       	cpc	r25, r19
    153a:	0c f3       	brlt	.-62     	; 0x14fe <__fpcmp_parts_f+0x46>
    153c:	28 17       	cp	r18, r24
    153e:	39 07       	cpc	r19, r25
    1540:	9c f0       	brlt	.+38     	; 0x1568 <__fpcmp_parts_f+0xb0>
    1542:	04 81       	ldd	r16, Z+4	; 0x04
    1544:	15 81       	ldd	r17, Z+5	; 0x05
    1546:	26 81       	ldd	r18, Z+6	; 0x06
    1548:	37 81       	ldd	r19, Z+7	; 0x07
    154a:	fd 01       	movw	r30, r26
    154c:	64 81       	ldd	r22, Z+4	; 0x04
    154e:	75 81       	ldd	r23, Z+5	; 0x05
    1550:	86 81       	ldd	r24, Z+6	; 0x06
    1552:	97 81       	ldd	r25, Z+7	; 0x07
    1554:	60 17       	cp	r22, r16
    1556:	71 07       	cpc	r23, r17
    1558:	82 07       	cpc	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	80 f2       	brcs	.-96     	; 0x14fe <__fpcmp_parts_f+0x46>
    155e:	06 17       	cp	r16, r22
    1560:	17 07       	cpc	r17, r23
    1562:	28 07       	cpc	r18, r24
    1564:	39 07       	cpc	r19, r25
    1566:	78 f4       	brcc	.+30     	; 0x1586 <__fpcmp_parts_f+0xce>
    1568:	44 23       	and	r20, r20
    156a:	59 f2       	breq	.-106    	; 0x1502 <__fpcmp_parts_f+0x4a>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	db cf       	rjmp	.-74     	; 0x1528 <__fpcmp_parts_f+0x70>
    1572:	fd 01       	movw	r30, r26
    1574:	81 81       	ldd	r24, Z+1	; 0x01
    1576:	88 23       	and	r24, r24
    1578:	21 f2       	breq	.-120    	; 0x1502 <__fpcmp_parts_f+0x4a>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	d4 cf       	rjmp	.-88     	; 0x1528 <__fpcmp_parts_f+0x70>
    1580:	92 30       	cpi	r25, 0x02	; 2
    1582:	09 f0       	breq	.+2      	; 0x1586 <__fpcmp_parts_f+0xce>
    1584:	b2 cf       	rjmp	.-156    	; 0x14ea <__fpcmp_parts_f+0x32>
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <__fpcmp_parts_f+0xda>
    158c:	ed 01       	movw	r28, r26
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	f2 cf       	rjmp	.-28     	; 0x1576 <__fpcmp_parts_f+0xbe>
    1592:	cb 01       	movw	r24, r22
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <__udivmodhi4>:
    159e:	aa 1b       	sub	r26, r26
    15a0:	bb 1b       	sub	r27, r27
    15a2:	51 e1       	ldi	r21, 0x11	; 17
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <__udivmodhi4_ep>

000015a6 <__udivmodhi4_loop>:
    15a6:	aa 1f       	adc	r26, r26
    15a8:	bb 1f       	adc	r27, r27
    15aa:	a6 17       	cp	r26, r22
    15ac:	b7 07       	cpc	r27, r23
    15ae:	10 f0       	brcs	.+4      	; 0x15b4 <__udivmodhi4_ep>
    15b0:	a6 1b       	sub	r26, r22
    15b2:	b7 0b       	sbc	r27, r23

000015b4 <__udivmodhi4_ep>:
    15b4:	88 1f       	adc	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	5a 95       	dec	r21
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__udivmodhi4_loop>
    15bc:	80 95       	com	r24
    15be:	90 95       	com	r25
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	08 95       	ret

000015c6 <__udivmodsi4>:
    15c6:	a1 e2       	ldi	r26, 0x21	; 33
    15c8:	1a 2e       	mov	r1, r26
    15ca:	aa 1b       	sub	r26, r26
    15cc:	bb 1b       	sub	r27, r27
    15ce:	fd 01       	movw	r30, r26
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <__udivmodsi4_ep>

000015d2 <__udivmodsi4_loop>:
    15d2:	aa 1f       	adc	r26, r26
    15d4:	bb 1f       	adc	r27, r27
    15d6:	ee 1f       	adc	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	a2 17       	cp	r26, r18
    15dc:	b3 07       	cpc	r27, r19
    15de:	e4 07       	cpc	r30, r20
    15e0:	f5 07       	cpc	r31, r21
    15e2:	20 f0       	brcs	.+8      	; 0x15ec <__udivmodsi4_ep>
    15e4:	a2 1b       	sub	r26, r18
    15e6:	b3 0b       	sbc	r27, r19
    15e8:	e4 0b       	sbc	r30, r20
    15ea:	f5 0b       	sbc	r31, r21

000015ec <__udivmodsi4_ep>:
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	1a 94       	dec	r1
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <__udivmodsi4_loop>
    15f8:	60 95       	com	r22
    15fa:	70 95       	com	r23
    15fc:	80 95       	com	r24
    15fe:	90 95       	com	r25
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	bd 01       	movw	r22, r26
    1606:	cf 01       	movw	r24, r30
    1608:	08 95       	ret

0000160a <__prologue_saves__>:
    160a:	2f 92       	push	r2
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	ca 1b       	sub	r28, r26
    1634:	db 0b       	sbc	r29, r27
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	09 94       	ijmp

00001642 <__epilogue_restores__>:
    1642:	2a 88       	ldd	r2, Y+18	; 0x12
    1644:	39 88       	ldd	r3, Y+17	; 0x11
    1646:	48 88       	ldd	r4, Y+16	; 0x10
    1648:	5f 84       	ldd	r5, Y+15	; 0x0f
    164a:	6e 84       	ldd	r6, Y+14	; 0x0e
    164c:	7d 84       	ldd	r7, Y+13	; 0x0d
    164e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1650:	9b 84       	ldd	r9, Y+11	; 0x0b
    1652:	aa 84       	ldd	r10, Y+10	; 0x0a
    1654:	b9 84       	ldd	r11, Y+9	; 0x09
    1656:	c8 84       	ldd	r12, Y+8	; 0x08
    1658:	df 80       	ldd	r13, Y+7	; 0x07
    165a:	ee 80       	ldd	r14, Y+6	; 0x06
    165c:	fd 80       	ldd	r15, Y+5	; 0x05
    165e:	0c 81       	ldd	r16, Y+4	; 0x04
    1660:	1b 81       	ldd	r17, Y+3	; 0x03
    1662:	aa 81       	ldd	r26, Y+2	; 0x02
    1664:	b9 81       	ldd	r27, Y+1	; 0x01
    1666:	ce 0f       	add	r28, r30
    1668:	d1 1d       	adc	r29, r1
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	ed 01       	movw	r28, r26
    1676:	08 95       	ret
