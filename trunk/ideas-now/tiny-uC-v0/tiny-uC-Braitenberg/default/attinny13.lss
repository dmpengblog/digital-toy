
attinny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000003e0  2**0
                  ALLOC
  3 .noinit       00000000  00800063  00800063  000003e0  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000003e0  2**0
                  CONTENTS
  5 .stab         00000354  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000064  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000010c  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000a5f  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000391  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000510  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000189  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea e4       	ldi	r30, 0x4A	; 74
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	03 c0       	rjmp	.+6      	; 0x2e <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	c8 95       	lpm
  2a:	31 96       	adiw	r30, 0x01	; 1
  2c:	0d 92       	st	X+, r0

0000002e <.do_copy_data_start>:
  2e:	a2 36       	cpi	r26, 0x62	; 98
  30:	b1 07       	cpc	r27, r17
  32:	d1 f7       	brne	.-12     	; 0x28 <.do_copy_data_loop>

00000034 <__do_clear_bss>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a2 e6       	ldi	r26, 0x62	; 98
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a3 36       	cpi	r26, 0x63	; 99
  40:	b1 07       	cpc	r27, r17
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	69 c0       	rjmp	.+210    	; 0x118 <main>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <keydown>:


char keydown()
{
	if( ! _test_bit(_inb(PORTB),ucKEY)) {			
  48:	b0 99       	sbic	0x16, 0	; 22
  4a:	09 c0       	rjmp	.+18     	; 0x5e <keydown+0x16>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  4c:	88 e5       	ldi	r24, 0x58	; 88
  4e:	9b e1       	ldi	r25, 0x1B	; 27
  50:	01 97       	sbiw	r24, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <keydown+0x8>
	    	_delay_ms(7); 							
	    	if(! _test_bit(_inb(PORTB),ucKEY ))		
  54:	b0 99       	sbic	0x16, 0	; 22
  56:	03 c0       	rjmp	.+6      	; 0x5e <keydown+0x16>
				return 1;							
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	08 95       	ret
        }											
       return 0	;									
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
}
  62:	08 95       	ret

00000064 <test_motor>:


unsigned char duty=0; 

test_motor(char *pwm)
{
  64:	f9 2f       	mov	r31, r25
  66:	e8 2f       	mov	r30, r24
	*pwm = 80;   /*top*/
  68:	80 e5       	ldi	r24, 0x50	; 80
  6a:	80 83       	st	Z, r24
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	b9 2f       	mov	r27, r25
  72:	a8 2f       	mov	r26, r24
  74:	11 97       	sbiw	r26, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <test_motor+0x10>
	_delay_ms(100);
	_delay_ms(100);
	_delay_ms(100);
	_delay_ms(100);
	
	*pwm=0;
  78:	b9 2f       	mov	r27, r25
  7a:	a8 2f       	mov	r26, r24
  7c:	11 97       	sbiw	r26, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <test_motor+0x18>
  80:	b9 2f       	mov	r27, r25
  82:	a8 2f       	mov	r26, r24
  84:	11 97       	sbiw	r26, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <test_motor+0x20>
  88:	b9 2f       	mov	r27, r25
  8a:	a8 2f       	mov	r26, r24
  8c:	11 97       	sbiw	r26, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <test_motor+0x28>
  90:	10 82       	st	Z, r1
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	b9 2f       	mov	r27, r25
  94:	a8 2f       	mov	r26, r24
  96:	11 97       	sbiw	r26, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <test_motor+0x32>
	_delay_ms(100);
	_delay_ms(100);
	_delay_ms(100);
	_delay_ms(100);
	
	*pwm=50;
  9a:	b9 2f       	mov	r27, r25
  9c:	a8 2f       	mov	r26, r24
  9e:	11 97       	sbiw	r26, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <test_motor+0x3a>
  a2:	b9 2f       	mov	r27, r25
  a4:	a8 2f       	mov	r26, r24
  a6:	11 97       	sbiw	r26, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <__stack+0x7>
  aa:	b9 2f       	mov	r27, r25
  ac:	a8 2f       	mov	r26, r24
  ae:	11 97       	sbiw	r26, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__stack+0xf>
  b2:	22 e3       	ldi	r18, 0x32	; 50
  b4:	20 83       	st	Z, r18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	b9 2f       	mov	r27, r25
  b8:	a8 2f       	mov	r26, r24
  ba:	11 97       	sbiw	r26, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <__stack+0x1b>
	_delay_ms(100);
	_delay_ms(100);
	_delay_ms(100);
	_delay_ms(100);
	
	*pwm = 40;
  be:	b9 2f       	mov	r27, r25
  c0:	a8 2f       	mov	r26, r24
  c2:	11 97       	sbiw	r26, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <__stack+0x23>
  c6:	b9 2f       	mov	r27, r25
  c8:	a8 2f       	mov	r26, r24
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <__stack+0x2b>
  ce:	b9 2f       	mov	r27, r25
  d0:	a8 2f       	mov	r26, r24
  d2:	11 97       	sbiw	r26, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__stack+0x33>
  d6:	28 e2       	ldi	r18, 0x28	; 40
  d8:	20 83       	st	Z, r18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	b9 2f       	mov	r27, r25
  dc:	a8 2f       	mov	r26, r24
  de:	11 97       	sbiw	r26, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <__stack+0x3f>
	_delay_ms(100);
	_delay_ms(100);
	
	*pwm = 0;
  e2:	b9 2f       	mov	r27, r25
  e4:	a8 2f       	mov	r26, r24
  e6:	11 97       	sbiw	r26, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <__stack+0x47>
  ea:	10 82       	st	Z, r1
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	b9 2f       	mov	r27, r25
  ee:	a8 2f       	mov	r26, r24
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <__stack+0x51>
	_delay_ms(100);
	_delay_ms(100);
	
	*pwm = 25;     //1.2*4  slower nearly stop
  f4:	b9 2f       	mov	r27, r25
  f6:	a8 2f       	mov	r26, r24
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__stack+0x59>
  fc:	29 e1       	ldi	r18, 0x19	; 25
  fe:	20 83       	st	Z, r18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	b9 2f       	mov	r27, r25
 102:	a8 2f       	mov	r26, r24
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__stack+0x65>
	_delay_ms(100);
	_delay_ms(100);
	*pwm=0;
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <__stack+0x69>
 10c:	10 82       	st	Z, r1
 10e:	08 95       	ret

00000110 <set_speed>:
}

void set_speed(unsigned int adc, char* ch)
{
 110:	f7 2f       	mov	r31, r23
 112:	e6 2f       	mov	r30, r22
  
		*ch=adc;
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <main>:

}

int main()
{
 118:	cf e9       	ldi	r28, 0x9F	; 159
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61
    unsigned int leye,reye = 0;

	DDRB = 0xFF;	/* 定义B口为输出*/
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;	/* 关闭全部LED */
 124:	18 ba       	out	0x18, r1	; 24

    pwm_init();
 126:	4b d0       	rcall	.+150    	; 0x1be <pwm_init>
	adc_init();
 128:	85 d0       	rcall	.+266    	; 0x234 <adc_init>

    _pin_mode(PORTB,PB2,INPUT);
 12a:	22 e0       	ldi	r18, 0x02	; 2
 12c:	42 2f       	mov	r20, r18
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	88 e3       	ldi	r24, 0x38	; 56
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	9d d0       	rcall	.+314    	; 0x270 <__set_port_mode>
	_pin_mode(PORTB,PB3,INPUT);
 136:	23 e0       	ldi	r18, 0x03	; 3
 138:	42 2f       	mov	r20, r18
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	97 d0       	rcall	.+302    	; 0x270 <__set_port_mode>

	led_init();	
 142:	4a d0       	rcall	.+148    	; 0x1d8 <led_init>
    test_motor((char*)&R_MOTOR);
 144:	89 e4       	ldi	r24, 0x49	; 73
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8d df       	rcall	.-230    	; 0x64 <test_motor>
    test_motor((char*)&L_MOTOR);
 14a:	86 e5       	ldi	r24, 0x56	; 86
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	8a df       	rcall	.-236    	; 0x64 <test_motor>

   
	
	while (1){

 	   //continue;
	  
	   leye=_adc(LEYE_ADC);
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	79 d0       	rcall	.+242    	; 0x248 <_adc>
 156:	e8 2e       	mov	r14, r24
 158:	f9 2e       	mov	r15, r25
	   leye+=_adc(LEYE_ADC);
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	74 d0       	rcall	.+232    	; 0x248 <_adc>
 160:	e8 0e       	add	r14, r24
 162:	f9 1e       	adc	r15, r25
	   leye/=2;
 164:	f6 94       	lsr	r15
 166:	e7 94       	ror	r14
	   reye=_adc(REYE_ADC);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	6d d0       	rcall	.+218    	; 0x248 <_adc>
 16e:	d9 2f       	mov	r29, r25
 170:	c8 2f       	mov	r28, r24
	   reye+=_adc(REYE_ADC);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	68 d0       	rcall	.+208    	; 0x248 <_adc>
 178:	c8 0f       	add	r28, r24
 17a:	d9 1f       	adc	r29, r25
	   reye/=2;
 17c:	d6 95       	lsr	r29
 17e:	c7 95       	ror	r28
	   /*sun, in door, 100-240*/
	    if(leye<50 || reye<50){
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	e8 16       	cp	r14, r24
 184:	f1 04       	cpc	r15, r1
 186:	18 f0       	brcs	.+6      	; 0x18e <main+0x76>
 188:	c2 33       	cpi	r28, 0x32	; 50
 18a:	d1 05       	cpc	r29, r1
 18c:	10 f4       	brcc	.+4      	; 0x192 <main+0x7a>
			ucLED_On();
 18e:	c4 9a       	sbi	0x18, 4	; 24
 190:	01 c0       	rjmp	.+2      	; 0x194 <main+0x7c>
	    }else
		     ucLED_Off();
 192:	c4 98       	cbi	0x18, 4	; 24
		   
       set_speed(150-leye/2,(char*)&L_MOTOR);
 194:	f6 94       	lsr	r15
 196:	e7 94       	ror	r14
 198:	06 e9       	ldi	r16, 0x96	; 150
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	66 e5       	ldi	r22, 0x56	; 86
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	91 2f       	mov	r25, r17
 1a2:	80 2f       	mov	r24, r16
 1a4:	8e 19       	sub	r24, r14
 1a6:	9f 09       	sbc	r25, r15
 1a8:	b3 df       	rcall	.-154    	; 0x110 <set_speed>
       set_speed((150-reye/2),(char*)&R_MOTOR);
 1aa:	d6 95       	lsr	r29
 1ac:	c7 95       	ror	r28
 1ae:	69 e4       	ldi	r22, 0x49	; 73
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	91 2f       	mov	r25, r17
 1b4:	80 2f       	mov	r24, r16
 1b6:	8c 1b       	sub	r24, r28
 1b8:	9d 0b       	sbc	r25, r29
 1ba:	aa df       	rcall	.-172    	; 0x110 <set_speed>
 1bc:	c9 cf       	rjmp	.-110    	; 0x150 <main+0x38>

000001be <pwm_init>:


void pwm_init()
{
  TCCR0A  =  ( _bits8(0b11,WGM00,WGM02) ) |  ( _bits8(0b10, COM0B0,COM0B1) |  ( _bits8(0b10, COM0A0,COM0A1) ));  
 1be:	83 ea       	ldi	r24, 0xA3	; 163
 1c0:	8f bd       	out	0x2f, r24	; 47
  TCCR0B  =  _bits8(0b100, CS00,CS02);     
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	83 bf       	out	0x33, r24	; 51
  TCNT0  = 0;
 1c6:	12 be       	out	0x32, r1	; 50
  OCR0A = 0 ;  /* duty = 0; */
 1c8:	16 be       	out	0x36, r1	; 54

  GTCCR = 1; /*reset prescaler*/
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	88 bd       	out	0x28, r24	; 40
 1ce:	08 95       	ret

000001d0 <pwm_setduty>:

}


void pwm_setduty(unsigned char duty)
{
  OCR0B = OCR0A=duty;
 1d0:	86 bf       	out	0x36, r24	; 54
 1d2:	86 b7       	in	r24, 0x36	; 54
 1d4:	89 bd       	out	0x29, r24	; 41
 1d6:	08 95       	ret

000001d8 <led_init>:



void led_init()
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	a0 e2       	ldi	r26, 0x20	; 32
 1de:	be e4       	ldi	r27, 0x4E	; 78
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	24 e0       	ldi	r18, 0x04	; 4
	/* 往前步进 */
    char i;
	for (i = 0; i < 5; i++){
        ucLED_On();
 1e6:	c4 9a       	sbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	8a 2f       	mov	r24, r26
 1ea:	9b 2f       	mov	r25, r27
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <led_init+0x14>
		_delay_ms(20);
 	    ucLED_Off();
 1f0:	c4 98       	cbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f2:	8a 2f       	mov	r24, r26
 1f4:	9b 2f       	mov	r25, r27
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <led_init+0x1e>
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	27 ff       	sbrs	r18, 7
 1fe:	f3 cf       	rjmp	.-26     	; 0x1e6 <led_init+0xe>
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <sharp_flash>:
 	    _delay_ms(20);
	}

}	


char mod=2;


void sharp_flash()
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	a0 e1       	ldi	r26, 0x10	; 16
 20c:	b7 e2       	ldi	r27, 0x27	; 39
 20e:	c0 e0       	ldi	r28, 0x00	; 0
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	23 e6       	ldi	r18, 0x63	; 99
    char x;

    for(x=0;x<100;x++){
       ucLED_On();
 214:	c4 9a       	sbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 216:	8a 2f       	mov	r24, r26
 218:	9b 2f       	mov	r25, r27
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <sharp_flash+0x14>
	   
       _delay_ms(10);
	   ucLED_Off();
 21e:	c4 98       	cbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 220:	8a 2f       	mov	r24, r26
 222:	9b 2f       	mov	r25, r27
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <sharp_flash+0x1e>
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	27 ff       	sbrs	r18, 7
 22c:	f3 cf       	rjmp	.-26     	; 0x214 <sharp_flash+0xe>
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <adc_init>:
{
	short adc;

	/// 1.1V ref                       ADCL keep low 8bit        init for ch1,PB2, ADC in tiny-uC  
	ADMUX = _bits8(0b1,REFS0,REFS0) |   _bits8(0,ADLAR,ADLAR) |  _bits8(ucADC_CH,MUX0,MUX1);    
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	87 b9       	out	0x07, r24	; 7
        /*must READ ADCH for compled ADC*/

	/*ADC status and control*/   
	         /*enable ADC*/	  /*start first ADC*/    /*no interrupt for now*/ /*9.6M/64, 125kHz*/	    
	ADCSRA = _bits8(1,ADEN,ADEN) | _bits8(1,ADSC,ADSC) |  _bits8(0, ADIE,ADIE)   | _bits8(0b110, ADPS0,ADPS2);
 238:	86 ec       	ldi	r24, 0xC6	; 198
 23a:	86 b9       	out	0x06, r24	; 6
       /*wait for 25 ADC clock for first ADC completed*/
	while(!_test_bit(ADCSRA,ADIF));
 23c:	34 9b       	sbis	0x06, 4	; 6
 23e:	fe cf       	rjmp	.-4      	; 0x23c <adc_init+0x8>
	_set_bit(ADCSRA,ADIF); //clear IF bit
 240:	34 9a       	sbi	0x06, 4	; 6
  
    adc = ADCL;
 242:	84 b1       	in	r24, 0x04	; 4
	barrier();
	adc = ADCH;
 244:	85 b1       	in	r24, 0x05	; 5
 246:	08 95       	ret

00000248 <_adc>:
}



unsigned int _adc(unsigned char ch)
{
  unsigned int adc_l=0,adc=0;

  /*select channel*/
  _mov_bits8(ADMUX,ch,MUX0,MUX1,0,2); /*ADC0...ADC4*/
 248:	98 2f       	mov	r25, r24
 24a:	97 70       	andi	r25, 0x07	; 7
 24c:	87 b1       	in	r24, 0x07	; 7
 24e:	8c 7f       	andi	r24, 0xFC	; 252
 250:	98 2b       	or	r25, r24
 252:	97 b9       	out	0x07, r25	; 7

  /*start ADC*/
  _set_bit(ADCSRA,ADSC);
 254:	36 9a       	sbi	0x06, 6	; 6

  /*wait completed(ADIF active)*/
   while(!_test_bit(ADCSRA,ADIF));
 256:	34 9b       	sbis	0x06, 4	; 6
 258:	fe cf       	rjmp	.-4      	; 0x256 <_adc+0xe>

  /*read result */
  /*must READ ADCH for compled ADC*/
   adc_l = ADCL;
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	28 2f       	mov	r18, r24
 25e:	33 27       	eor	r19, r19
   /* GCC will swich ADCL read fist,so tell it don't do that*/
   barrier();
   adc =   ADCH ;
 260:	85 b1       	in	r24, 0x05	; 5
 262:	99 27       	eor	r25, r25
   adc = (adc<<8)|adc_l;
 264:	98 2f       	mov	r25, r24
 266:	88 27       	eor	r24, r24

   _set_bit(ADCSRA,ADIF); //clear IF bit
 268:	34 9a       	sbi	0x06, 4	; 6
   return adc;
}
 26a:	82 2b       	or	r24, r18
 26c:	93 2b       	or	r25, r19
 26e:	08 95       	ret

00000270 <__set_port_mode>:
#include "avrio.h"


void __set_port_mode(volatile char* port_addr, char mode, char n, char m)
{
 270:	b9 2f       	mov	r27, r25
 272:	a8 2f       	mov	r26, r24
 274:	72 2f       	mov	r23, r18
	if(INPUT == mode){
 276:	66 23       	and	r22, r22
 278:	09 f5       	brne	.+66     	; 0x2bc <__set_port_mode+0x4c>
    	/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) &= ~(_MASK8(n,m));  /*enable input*/  
 27a:	f9 2f       	mov	r31, r25
 27c:	e8 2f       	mov	r30, r24
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	93 2f       	mov	r25, r19
 286:	82 2f       	mov	r24, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <__set_port_mode+0x1e>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	4a 95       	dec	r20
 290:	e2 f7       	brpl	.-8      	; 0x28a <__set_port_mode+0x1a>
 292:	48 2f       	mov	r20, r24
 294:	59 2f       	mov	r21, r25
 296:	87 e0       	ldi	r24, 0x07	; 7
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	87 1b       	sub	r24, r23
 29c:	91 09       	sbc	r25, r1
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__set_port_mode+0x34>
 2a0:	35 95       	asr	r19
 2a2:	27 95       	ror	r18
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <__set_port_mode+0x30>
 2a8:	24 23       	and	r18, r20
 2aa:	92 2f       	mov	r25, r18
 2ac:	90 95       	com	r25
 2ae:	80 81       	ld	r24, Z
 2b0:	89 23       	and	r24, r25
 2b2:	80 83       	st	Z, r24
    	/* PORT */
		(*(volatile uint8_t *)port_addr) |= (_MASK8(n,m)) ; /*pull-up-enable*/  
 2b4:	8c 91       	ld	r24, X
 2b6:	82 2b       	or	r24, r18
 2b8:	8c 93       	st	X, r24
 2ba:	08 95       	ret
	}else if(OUTPUT == mode){
 2bc:	61 30       	cpi	r22, 0x01	; 1
 2be:	e1 f4       	brne	.+56     	; 0x2f8 <__set_port_mode+0x88>
		/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) |= _MASK8(n,m);  /*enable output*/  
 2c0:	f9 2f       	mov	r31, r25
 2c2:	e8 2f       	mov	r30, r24
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	93 2f       	mov	r25, r19
 2cc:	82 2f       	mov	r24, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__set_port_mode+0x64>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	4a 95       	dec	r20
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <__set_port_mode+0x60>
 2d8:	48 2f       	mov	r20, r24
 2da:	59 2f       	mov	r21, r25
 2dc:	87 e0       	ldi	r24, 0x07	; 7
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	87 1b       	sub	r24, r23
 2e2:	91 09       	sbc	r25, r1
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__set_port_mode+0x7a>
 2e6:	35 95       	asr	r19
 2e8:	27 95       	ror	r18
 2ea:	8a 95       	dec	r24
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <__set_port_mode+0x76>
 2ee:	94 2f       	mov	r25, r20
 2f0:	92 23       	and	r25, r18
 2f2:	80 81       	ld	r24, Z
 2f4:	89 2b       	or	r24, r25
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <_swap8>:
   	}

    //panic();
	//DDRx &= ~(1<< DDx##n);  /*enable input*/   
	//PORTx |= (1<< PX##n)    /*pull-up-enable*/  
}

#if 0
/*0-64 seconds*/
void delay(unsigned long ticks)
{
  
   unsigned long long lt = jiffers;

   while(!timeafter(jiffers,(lt+ ticks)));
   
   return;

}
#endif

/*abcd1234 => 4321dcba */
unsigned char _swap8(unsigned char x)
{
    /*abcd1234 => 1234abcd*/
	x= (x>>4) | (x<<4);
 2fa:	28 2f       	mov	r18, r24
 2fc:	22 95       	swap	r18
 2fe:	2f 70       	andi	r18, 0x0F	; 15
 300:	99 27       	eor	r25, r25
 302:	e4 e0       	ldi	r30, 0x04	; 4
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	ea 95       	dec	r30
 30a:	e1 f7       	brne	.-8      	; 0x304 <_swap8+0xa>
 30c:	28 2b       	or	r18, r24
	/*1234abcd  => 3412cdab*/
    	   /*1200ab00*/         /*003400cd*/
	x= ((x&0b11001100)>>2) | ((x&0b00110011)<<2);
 30e:	33 27       	eor	r19, r19
 310:	93 2f       	mov	r25, r19
 312:	82 2f       	mov	r24, r18
 314:	8c 7c       	andi	r24, 0xCC	; 204
 316:	90 70       	andi	r25, 0x00	; 0
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	23 73       	andi	r18, 0x33	; 51
 322:	30 70       	andi	r19, 0x00	; 0
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
                 /*0xcc*/            /*0x33*/
	/*3412cdab => 4321dcba*/
	x= ((x&0b10101010)>>1) | ((x&0b01010101)<<1);
 32c:	82 2b       	or	r24, r18
 32e:	93 2b       	or	r25, r19
 330:	28 2f       	mov	r18, r24
 332:	39 2f       	mov	r19, r25
 334:	2a 7a       	andi	r18, 0xAA	; 170
 336:	30 70       	andi	r19, 0x00	; 0
 338:	35 95       	asr	r19
 33a:	27 95       	ror	r18
 33c:	85 75       	andi	r24, 0x55	; 85
 33e:	90 70       	andi	r25, 0x00	; 0
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
            /*0xAA*/            /*0x55*/
    return x;
}
 344:	82 2b       	or	r24, r18
 346:	93 2b       	or	r25, r19
 348:	08 95       	ret
