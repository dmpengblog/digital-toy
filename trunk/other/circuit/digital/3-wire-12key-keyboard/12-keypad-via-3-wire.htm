<html><head>
<meta http-equiv="content-type" content="text/html; charset=GB2312">

<title>Connect keypad to PIC with 3 wires!</title>
<meta name="description" content="A minimalist solution to connecting a keypad">
<meta name="keywords" content="keypad, connect keypad to microcontroller">
</head><body alink="#8f0000" bgcolor="#808080" vlink="#6f004f" text="#000000" link="#00008f">
<font face="Arial,Helvetica,Verdana,Geneva,sans-serif">
<font size="-1"> <!-- default font-->
<!-- ---------------------------------------------------------------------->
<font size="2">
<a href="http://www.romanblack.com/index.htm#elec">[Back to Home Page]</a></font>
<br>
<br>

<!-- ---------------------------------------------------------------------->
<font size="+2"><b>www.RomanBlack.com</b></font>
<br>
<br>

<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+2"><b>Keypad to a PIC with only 3 pins!</b></font><br>
<b>A circuit and code procedure for interfacing a 12-key Keypad to a PIC</b><br>
Roman Black - April 2004 - web Aug 2006
<br>
<br>
<br>

<!-- ---------------------------------------------------------------------->
<!-- ---------------------------------------------------------------------->
<!-- ---------------------------------------------------------------------->




<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+1"><b>What is it? </b></font>
<!-- ---------------------------------------------------------------------->
<br>
<br>

<b>A 12-key telephone style keypad</b> can be interfaced to a PIC micro using
<b>only 3 digital input pins</b> and a few cheap resistors and capacitors.
<br>
<br>


This is useful when you need to use a small (cheap!) PIC chip or other micro
that does not have a lot of pins. 12-key keypads are cheaply avaliable from
the hobby electronics stores and are already connected in a 3x4 matrix.
With even the smallest of PICs
(like a 12c508) this setup can make a <b>12-key remote control</b> or
DTMF sound generator. These 8-pin PIC micros have 6 digital I/O pins and with only
3 pins needed for the keypad there are 3 PIC pins still available!
<br>
<br>
<br>


<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+1"><b>Important! </b></font>
<!-- ---------------------------------------------------------------------->
<br>
<br>

The information provided here <b>is not a complete application.</b> It is
however tested and works, provided you have the PIC programming skills
and electronic hardware skills to put it together. It is very suitable
for use by a professional product developer or high-level PIC hobbyist.
Beginner PIC hobbyists may struggle with this design - please don't
email me for help! <b>All the help is already provided here on this
page.</b>
<br>
<br>
<br>


<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+1"><b>How it works </b></font>
<!-- ---------------------------------------------------------------------->
<br>
<br>

<b>The circuit operates by discharging the 3 caps, and then measuring the time
taken for a cap to charge up.</b> A cap will only charge up if a key is pressed.
My code procedure allows for efficient battery use and no current is
required (apart from the PIC itself) unless a key is pressed.
<br>


</font></font><pre><font face="Arial,Helvetica,Verdana,Geneva,sans-serif"><font size="-1"><font size="2">
            +5v -----------------*------*------*------*-------
                                 |      |      |      |
                                 R      R      R      R
   ,------,                      |10k   |27k   |47k   |68k
   | PIC  |                      |      |      |      |
   |12c508|  270 ohm             |      |      |      |
   |      |----R---------*-------S------S------S------S-------
   |      |              |       |      |      |      |
   |      |              |       |      |      |      |
   |      |              |       |      |      |      |
   |      |----R-----*---|-------S------S------S------S-------
   |      |          |   |       |      |      |      |
   |      |          |   |       |      |      |      |
   |      |          |   |       |      |      |      |
   |      |----R-*---|---|-------S------S------S------S-------
   |      |      |   |   |
   '------'      C   C   C           12-key keypad matrix:
                 |   |   | 3.3nF
                 |   |   |                    |
                -*---*---*-              ,-S--*
                   GND                   |    |
                                      ---*----|------
                                              |
                                              |
</font></font></font></pre>
<font face="Arial,Helvetica,Verdana,Geneva,sans-serif"><font size="-1"><br>

<b>In the circuit diagram</b> you can see that the <b>3 PIC pins</b> are connected
by 270 ohm resistors to the <b>3 caps.</b>
The 12-key <b>keypad</b> is connected in the standard 3x4 matrix, most of them are
supplied like this anyway. There are also <b>4 resistors</b> at the top that
give <b>different capacitor charge times</b> depending on which key is pressed.
<br>
<br>

<b>The system is only suitable for a single keypress at a time</b> which is
also a standard for remote controls etc.
<br>
<br>

In <b>sleep mode</b> the PIC is configured for <b>wake up on pin change</b> so it
stays in the low-current sleep mode and will automatically wake up when
any of the 3 input pins goes hi, which happens on any keypress.
<br>
<br>
<br>


<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+1"><b>The procedure </b></font>
<!-- ---------------------------------------------------------------------->
<br>
<br>

The benefit of this procedure is that the timing process is very
simple, using very little code space, and it is reliable and fast.
<br>
<br>

<b>Procedure;</b>
<li> PIC wakes up on keypress, reads the 3 pins and knows the ROW
</li><li> PIC grounds the 3 pins, waits a short time
</li><li> PIC resets its internal timer, and releases the 3 pins
</li><li> When the pin goes HIGH (again) the timer is grabbed
</li><li> The COLUMN is known based on the timer value
<br>
<br>

<b>The code goes something like this;</b>
<br>

<pre><font size="2">(PIC has just woken up on keypress)

discharge
	movf GPIO,w		; read the pins
	andlw b'00001011'	; only keep GP3,GP1,GP0
	movwf row		; save as ROW data

	(your code goes here to set pins as LOW outputs)
	clrf TMR0		; reset timer0
	btfss TMR0,4		; and wait 16 timer counts
	goto $-1		;

				; ready to start the time test now
	(your code goes here to set pins as inputs again)
	clrf TMR0		; reset timer0 again

charging
	movf GPIO,w		; read the pins
	andlw b'00001011'	; only keep GP3,GP1,GP0
	skpnz			; nz means a pin is now HIGH
	goto charging		; z, pin not HIGH yet 

find_column
	movf TMR0,w		; grab timer0 value
	movwf timer		; save timer value
</font></pre>
<br>


After this point the PIC <b>knows the row</b> from the bit set
in the ROW variable, and can compare the value it grabbed from the timer
against 3 setpoints to <b>determine the column</b> using this method;
<br>
<br>
column = 1, if timer &lt; sp1 then goto done<br>
column = 2, if timer &lt; sp2 then goto done<br>
column = 3, if timer &lt; sp3 then goto done<br>
column = 4<br>
done: (we now have the column value)
<br>
<br>

With the parts values shown in the circuit, the 4 timer periods are all
less than 256uS. This is ideal for a <b>PIC internal RC clock running at 4MHz
and timer0 prescaler set to 1:1</b> (so 256uS = 256 timer counts). The 3 setpoints
can be adjusted after some testing and ideally the grabbed timer values should
be safely in the middle between the setpoints you choose.
<br>
<br>
<br>

<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+1"><b>Advantages and Disadvantages</b></font>
<!-- ---------------------------------------------------------------------->
<br>
<br>

<b>Advantages;</b>
</li><li> <b>Only 3 pins needed for a 12-key keypad!!</b>
</li><li> The system uses no power until a key is pressed
</li><li> Very little power is used to do the key tests
</li><li> No power is used after tests are done if key is held down
</li><li> The system is very reliable once good setpoints have been chosen
</li><li> Testing is very quick, and can be repeated as a safety "debounce"
</li><li> System uses very little code space
</li><li> Suitable to be a battery powered remote (use a low quiescent current voltage regulator)

<br>
<br>

<b>Disadvantages;</b>
</li><li> Needs a reasonably stable (regulated) supply voltage
</li><li> Needs 7 resistors and 3 caps
</li><li> More fussy to use than just using 7 PIC pins in the traditional way
<br>
<br>
<br>


<!-- ---------------------------------------------------------------------->
<font color="#ffff00" size="+1"><b>Tips for commercial use</b></font>
<!-- ---------------------------------------------------------------------->
<br>
<br>

By reducing the caps to 22pF you can <b>get rid of the 3x 220 ohm
resistors</b> to save costs. This will mean increasing the 4 timing
resistors by a large amount and changing the timing code accordingly.
PIC pin leakage will affect timing periods so some careful
tuning may be needed.
<br>
<br>

To save the cost of a regulator, you could increase the difference between
the timed periods by changing the 4 resistor values.
Make the first R much lower and the last R much higher as these can
be defaulted, and the only 2 critical values are the middle 2. Something
like a binary multiple may work best, like 1k,4k,16k,64k etc.
I'm fairly sure that with some fine tuning the time periods can be
made reliable even through a full 40% PSU voltage drop as may occur with
batteries. Code will need to be modified to suit the wider
timing ranges. As an interesting bonus the PIC could detect it's own battery
voltage by the change in time periods as the battery ages, this effect
has been noted before when using RC timed periods and the PIC TTL inputs.
<br>
<br>
<br>




<!-- ---------------------------------------------------------------------->
<!-- ---------------------------------------------------------------------->
 - end - 
<br>
<br>

<font size="2">
<a href="http://www.romanblack.com/index.htm#elec">[Back to Home Page]</a>
</font>

<br>
</li></font>
</font></body></html>