
i-charger-m8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000324  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000003ba  2**0
                  ALLOC
  3 .noinit       00000000  00800064  00800064  000003ba  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000003ba  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000064  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000011b  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000a08  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000423  00000000  00000000  00001333  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000005b0  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000019f  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e2       	ldi	r30, 0x24	; 36
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1d c0       	rjmp	.+58     	; 0x94 <main>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <keydown>:


char keydown()
{
   _test_key(KEY2);
  5c:	83 99       	sbic	0x10, 3	; 16
  5e:	09 c0       	rjmp	.+18     	; 0x72 <keydown+0x16>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  60:	88 e5       	ldi	r24, 0x58	; 88
  62:	9b e1       	ldi	r25, 0x1B	; 27
  64:	01 97       	sbiw	r24, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <keydown+0x8>
  68:	83 99       	sbic	0x10, 3	; 16
  6a:	03 c0       	rjmp	.+6      	; 0x72 <keydown+0x16>
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	08 95       	ret
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
}
  76:	08 95       	ret

00000078 <keyup>:
char keyup()
{
   _test_key(KEY1);
  78:	82 99       	sbic	0x10, 2	; 16
  7a:	09 c0       	rjmp	.+18     	; 0x8e <keyup+0x16>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  7c:	88 e5       	ldi	r24, 0x58	; 88
  7e:	9b e1       	ldi	r25, 0x1B	; 27
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <keyup+0x8>
  84:	82 99       	sbic	0x10, 2	; 16
  86:	03 c0       	rjmp	.+6      	; 0x8e <keyup+0x16>
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	08 95       	ret
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
}
  92:	08 95       	ret

00000094 <main>:

unsigned char duty=128; 
int i=0;
int main()
{
  94:	cf e5       	ldi	r28, 0x5F	; 95
  96:	d4 e0       	ldi	r29, 0x04	; 4
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

    led_init();
  9c:	50 d0       	rcall	.+160    	; 0x13e <led_init>
    _key_init();	
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	42 2f       	mov	r20, r18
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	82 e3       	ldi	r24, 0x32	; 50
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	ff d0       	rcall	.+510    	; 0x2a8 <__set_port_mode>
  aa:	23 e0       	ldi	r18, 0x03	; 3
  ac:	42 2f       	mov	r20, r18
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	82 e3       	ldi	r24, 0x32	; 50
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	f9 d0       	rcall	.+498    	; 0x2a8 <__set_port_mode>

    
	pwm_init();
  b6:	9b d0       	rcall	.+310    	; 0x1ee <pwm_init>
    init_74hc595();
  b8:	a9 d0       	rcall	.+338    	; 0x20c <init_74hc595>
    
	while (1){
	   	       
	    write_74hc595(i++);
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	90 91 63 00 	lds	r25, 0x0063
  c2:	9c 01       	movw	r18, r24
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 63 00 	sts	0x0063, r25
  ca:	80 93 62 00 	sts	0x0062, r24
  ce:	c9 01       	movw	r24, r18
  d0:	d6 d0       	rcall	.+428    	; 0x27e <write_74hc595>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  d2:	c8 e9       	ldi	r28, 0x98	; 152
  d4:	da e3       	ldi	r29, 0x3A	; 58
  d6:	ce 01       	movw	r24, r28
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x44>
		_delay_ms(15);
        //sharp_flash();
	    //pwm_demo();
        if( keydown()){
  dc:	bf df       	rcall	.-130    	; 0x5c <keydown>
  de:	88 23       	and	r24, r24
  e0:	a1 f0       	breq	.+40     	; 0x10a <main+0x76>
		  //_set_bit(PORTB,1);
		  duty-=2;
  e2:	80 91 60 00 	lds	r24, 0x0060
  e6:	82 50       	subi	r24, 0x02	; 2
  e8:	80 93 60 00 	sts	0x0060, r24

 		  pwm_setduty(duty);
  ec:	8b d0       	rcall	.+278    	; 0x204 <pwm_setduty>
		  if(duty>=0xFF)
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x66>
		     duty=0;
  f6:	10 92 60 00 	sts	0x0060, r1
          _clear_bit(PORTD,1);
  fa:	91 98       	cbi	0x12, 1	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fc:	ce 01       	movw	r24, r28
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x6a>
		  _delay_ms(15);  
		  _set_bit(PORTD,1);
 102:	91 9a       	sbi	0x12, 1	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 104:	ce 01       	movw	r24, r28
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x72>
		  _delay_ms(15);  

		 }  
		 if( keyup()){
 10a:	b6 df       	rcall	.-148    	; 0x78 <keyup>
 10c:	88 23       	and	r24, r24
 10e:	a9 f2       	breq	.-86     	; 0xba <main+0x26>
		  //_set_bit(PORTB,1);
		  duty+=2;
 110:	80 91 60 00 	lds	r24, 0x0060
 114:	8e 5f       	subi	r24, 0xFE	; 254
 116:	80 93 60 00 	sts	0x0060, r24

 		  pwm_setduty(duty);
 11a:	74 d0       	rcall	.+232    	; 0x204 <pwm_setduty>
		  if(duty<=0)
 11c:	80 91 60 00 	lds	r24, 0x0060
 120:	88 23       	and	r24, r24
 122:	19 f4       	brne	.+6      	; 0x12a <main+0x96>
		     duty=0xFF;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	80 93 60 00 	sts	0x0060, r24
          _clear_bit(PORTD,0);
 12a:	90 98       	cbi	0x12, 0	; 18
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 12c:	88 e9       	ldi	r24, 0x98	; 152
 12e:	9a e3       	ldi	r25, 0x3A	; 58
 130:	fc 01       	movw	r30, r24
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x9e>
		  _delay_ms(15);  
		  _set_bit(PORTD,0);
 136:	90 9a       	sbi	0x12, 0	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xa4>
 13c:	be cf       	rjmp	.-132    	; 0xba <main+0x26>

0000013e <led_init>:



void led_init()
{
 13e:	cf 93       	push	r28
 140:	c2 e0       	ldi	r28, 0x02	; 2
	/* ÍùÇ°²½½ø */
    char i;
		for (i = 0; i < 3; i++){

			_port_modenm(LED_PORT,0,1,OUTPUT);//_nm8(0b11,0,1);
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	62 2f       	mov	r22, r18
 148:	82 e3       	ldi	r24, 0x32	; 50
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	ad d0       	rcall	.+346    	; 0x2a8 <__set_port_mode>
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <led_init+0x16>
			_delay_ms(200);
 		    LED_Off(0);
 158:	90 9a       	sbi	0x12, 0	; 18
 		    LED_Off(1);
 15a:	91 9a       	sbi	0x12, 1	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <led_init+0x1e>
 160:	c1 50       	subi	r28, 0x01	; 1
 162:	c7 ff       	sbrs	r28, 7
 164:	ee cf       	rjmp	.-36     	; 0x142 <led_init+0x4>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <sharp_flash>:
			_delay_ms(200);
		}

}	


char mod=2;


void sharp_flash()
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	20 91 61 00 	lds	r18, 0x0061
 172:	82 2f       	mov	r24, r18
 174:	99 27       	eor	r25, r25
 176:	bc 01       	movw	r22, r24
 178:	62 70       	andi	r22, 0x02	; 2
 17a:	70 70       	andi	r23, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	44 70       	andi	r20, 0x04	; 4
 180:	50 70       	andi	r21, 0x00	; 0
 182:	a0 e2       	ldi	r26, 0x20	; 32
 184:	be e4       	ldi	r27, 0x4E	; 78
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
 18a:	32 e1       	ldi	r19, 0x12	; 18
    char x;

    for(x=0;x<19;x++){
   	   LED_On(mod&2?0:7);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	99 27       	eor	r25, r25
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	11 f0       	breq	.+4      	; 0x19a <sharp_flash+0x30>
 196:	8e 7f       	andi	r24, 0xFE	; 254
 198:	01 c0       	rjmp	.+2      	; 0x19c <sharp_flash+0x32>
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	82 bb       	out	0x12, r24	; 18
	   LED_On(mod&4?1:7);
 19e:	82 b3       	in	r24, 0x12	; 18
 1a0:	99 27       	eor	r25, r25
 1a2:	41 15       	cp	r20, r1
 1a4:	51 05       	cpc	r21, r1
 1a6:	11 f0       	breq	.+4      	; 0x1ac <sharp_flash+0x42>
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <sharp_flash+0x44>
 1ac:	8f 77       	andi	r24, 0x7F	; 127
 1ae:	82 bb       	out	0x12, r24	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b0:	cd 01       	movw	r24, r26
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <sharp_flash+0x48>

       _delay_ms(20);
	 

	   LED_Off(0);
 1b6:	90 9a       	sbi	0x12, 0	; 18
 	   LED_Off(1);
 1b8:	91 9a       	sbi	0x12, 1	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ba:	cd 01       	movw	r24, r26
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <sharp_flash+0x52>
 1c0:	31 50       	subi	r19, 0x01	; 1
 1c2:	37 ff       	sbrs	r19, 7
 1c4:	e3 cf       	rjmp	.-58     	; 0x18c <sharp_flash+0x22>
	   	_delay_ms(20);
	}
   mod++;
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	20 93 61 00 	sts	0x0061, r18
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <pwm_demo>:


void pwm_demo()
{
	_set_bit(PORTB, 2);//led
 1d2:	c2 9a       	sbi	0x18, 2	; 24
	_clear_bit(PORTB,1);
 1d4:	c1 98       	cbi	0x18, 1	; 24
	_clear_bit(PORTB,0); //pwm 
 1d6:	c0 98       	cbi	0x18, 0	; 24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 1d8:	80 ed       	ldi	r24, 0xD0	; 208
 1da:	97 e0       	ldi	r25, 0x07	; 7
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <pwm_demo+0xa>
	_delay_ms(2);
       
	_set_bit(PORTB, 0); //pwm
 1e0:	c0 9a       	sbi	0x18, 0	; 24
    _clear_bit(PORTB, 2);//led
 1e2:	c2 98       	cbi	0x18, 2	; 24
	_set_bit(PORTB,1);
 1e4:	c1 9a       	sbi	0x18, 1	; 24
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 255)
		__ticks = 0;	/* i.e. 256 */
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <pwm_demo+0x16>
 1ec:	08 95       	ret

000001ee <pwm_init>:
	_delay_us(500);

}




/* FAST PWM mode
The counter counts from BOTTOM to TOP then restarts from BOTTOM. 


---------------
TCCR0A :  COM0A1 COM0A0 

WGM2:0 
TOP is defined as 0xFF when WGM2:0 = 3  *
and OCR0A when WGM2:0 = 7

COM01 COM00: 
1       0     Clear OC0A on Compare Match, set OC0A at TOP *

------------------
TCCR0B :
WGM20  

CS02 CS01 CS00 £º
0     1      0       clkI/O/8 (From prescaler)


------------------
TCNT0  -

OCR0A ¨C Output Compare Register , cmpare to TCN0

GTCCR ¨C General Timer/Counter Control Register
             Bit              7            0
                            TSM          PSR10     
             Read/Write     R/W           R/W
             Initial Value    0             0
            Bit 7 ¨C TSM: Timer/Counter Synchronization Mode
            Writing the TSM bit to one activates the Timer/Counter Synchronization mode. In this mode, the
            value that is written to the PSR10 bit is kept, hence keeping the Prescaler Reset signal asserted.
            This ensures that the Timer/Counter is halted and can be configured without the risk of advanc-
            ing during configuration. When the TSM bit is written to zero, the PSR10 bit is cleared by
            hardware, and the Timer/Counter start counting.
            Bit 0 ¨C PSR10: Prescaler Reset Timer/Counter0
            When this bit is one, the Timer/Counter0 prescaler will be Reset. This bit is normally cleared
            immediately by hardware, except ifexcept )

*/



/*channal A, TOP= ICR1, match:OCR1A, PWMhz= 15khz , fcpu=4Mhz*/
void pwm_init()
{

  TCCR1A  =  ( _nm8(0b10,WGM10,WGM11) ) |  ( _nm8(0b10, COM1A0,COM1A1) );  
 1ee:	82 e8       	ldi	r24, 0x82	; 130
 1f0:	8f bd       	out	0x2f, r24	; 47
  TCCR1B  =   (_nm8(0b001, CS10,CS12))  | (_nm8(0b11,WGM12,WGM13));     
 1f2:	89 e1       	ldi	r24, 0x19	; 25
 1f4:	8e bd       	out	0x2e, r24	; 46
  TCNT1  = 0;
 1f6:	1d bc       	out	0x2d, r1	; 45
 1f8:	1c bc       	out	0x2c, r1	; 44
  ICR1 = 0xff ;  /* top = 0; */
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	97 bd       	out	0x27, r25	; 39
 200:	86 bd       	out	0x26, r24	; 38
 202:	08 95       	ret

00000204 <pwm_setduty>:
  
  //only attiny13?  GTCCR = 1; /*reset prescaler*/

}

void pwm_setduty(unsigned char duty)
{
  OCR1A = duty;
 204:	99 27       	eor	r25, r25
 206:	9b bd       	out	0x2b, r25	; 43
 208:	8a bd       	out	0x2a, r24	; 42
 20a:	08 95       	ret

0000020c <init_74hc595>:

void init_74hc595(void)
{
    _port_mode(PORT_74HC595, CLK,OUTPUT);
    _port_mode(PORT_74HC595, LATCH,OUTPUT);
 20c:	25 e0       	ldi	r18, 0x05	; 5
 20e:	42 2f       	mov	r20, r18
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	82 e3       	ldi	r24, 0x32	; 50
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	48 d0       	rcall	.+144    	; 0x2a8 <__set_port_mode>
    _port_mode(PORT_74HC595, SDI,OUTPUT);
 218:	26 e0       	ldi	r18, 0x06	; 6
 21a:	42 2f       	mov	r20, r18
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	42 d0       	rcall	.+132    	; 0x2a8 <__set_port_mode>
   
 224:	27 e0       	ldi	r18, 0x07	; 7
 226:	42 2f       	mov	r20, r18
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	3c d0       	rcall	.+120    	; 0x2a8 <__set_port_mode>
 230:	08 95       	ret

00000232 <shiftout>:
}

void shiftout(char data)
{
	char i=0;
	for(i=0;i<=7;i++){
	   delay_io;
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	a8 2f       	mov	r26, r24
 23c:	bb 27       	eor	r27, r27
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	e7 e0       	ldi	r30, 0x07	; 7
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 244:	82 2f       	mov	r24, r18
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <shiftout+0x14>
	  
	   if((data)>>i&0x1)
	    _set_bit(PORT_74HC595, SDI);
	   else
	     _clear_bit(PORT_74HC595, SDI);
 24a:	cd 01       	movw	r24, r26
 24c:	06 2e       	mov	r0, r22
 24e:	02 c0       	rjmp	.+4      	; 0x254 <shiftout+0x22>
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <shiftout+0x1e>
 258:	80 ff       	sbrs	r24, 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <shiftout+0x2e>

 25c:	97 9a       	sbi	0x12, 7	; 18
 25e:	01 c0       	rjmp	.+2      	; 0x262 <shiftout+0x30>
	   delay_io;
	  _set_bit(PORT_74HC595,CLK); 
 260:	97 98       	cbi	0x12, 7	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 262:	82 2f       	mov	r24, r18
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <shiftout+0x32>
       delay_io;
	  _clear_bit(PORT_74HC595, CLK);
	  		
 268:	95 9a       	sbi	0x12, 5	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 26a:	82 2f       	mov	r24, r18
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <shiftout+0x3a>
   }

 270:	95 98       	cbi	0x12, 5	; 18
 272:	e1 50       	subi	r30, 0x01	; 1
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	e7 ff       	sbrs	r30, 7
 27a:	e4 cf       	rjmp	.-56     	; 0x244 <shiftout+0x12>
 27c:	08 95       	ret

0000027e <write_74hc595>:
}
void write_74hc595(unsigned char data)
{
	_clear_bit(PORT_74HC595,CLK); //prepare send data
	delay_io;
    _clear_bit(PORT_74HC595,LATCH); //prepare open latch
 27e:	1f 93       	push	r17
    delay_io;
 280:	95 98       	cbi	0x12, 5	; 18
		__ticks = 1;
	else if (__tmp > 255)
		__ticks = 0;	/* i.e. 256 */
	else
		__ticks = (uint8_t)__tmp;
 282:	11 e0       	ldi	r17, 0x01	; 1
 284:	91 2f       	mov	r25, r17
 286:	9a 95       	dec	r25
 288:	f1 f7       	brne	.-4      	; 0x286 <write_74hc595+0x8>
	  
	shiftout(data);
 28a:	96 98       	cbi	0x12, 6	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 28c:	91 2f       	mov	r25, r17
 28e:	9a 95       	dec	r25
 290:	f1 f7       	brne	.-4      	; 0x28e <write_74hc595+0x10>
    delay_io;

    _set_bit(PORT_74HC595,CLK); //prepare send data
 292:	cf df       	rcall	.-98     	; 0x232 <shiftout>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 294:	81 2f       	mov	r24, r17
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <write_74hc595+0x18>
	delay_io;
    _set_bit(PORT_74HC595,LATCH); //prepare open latch
   
 29a:	95 9a       	sbi	0x12, 5	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 29c:	81 2f       	mov	r24, r17
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <write_74hc595+0x20>
}

 2a2:	96 9a       	sbi	0x12, 6	; 18
 2a4:	1f 91       	pop	r17
 2a6:	08 95       	ret

000002a8 <__set_port_mode>:
#include "include/avrio.h"


void __set_port_mode(volatile char* port_addr, char mode, char n, char m)
{
 2a8:	dc 01       	movw	r26, r24
 2aa:	72 2f       	mov	r23, r18
	if(INPUT == mode){
 2ac:	66 23       	and	r22, r22
 2ae:	f1 f4       	brne	.+60     	; 0x2ec <__set_port_mode+0x44>
    	/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) &= ~(_NM_MASK8(n,m));  /*enable input*/  
 2b0:	fc 01       	movw	r30, r24
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	c9 01       	movw	r24, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__set_port_mode+0x18>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	4a 95       	dec	r20
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__set_port_mode+0x14>
 2c4:	ac 01       	movw	r20, r24
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	87 1b       	sub	r24, r23
 2cc:	91 09       	sbc	r25, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__set_port_mode+0x2c>
 2d0:	35 95       	asr	r19
 2d2:	27 95       	ror	r18
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <__set_port_mode+0x28>
 2d8:	24 23       	and	r18, r20
 2da:	92 2f       	mov	r25, r18
 2dc:	90 95       	com	r25
 2de:	80 81       	ld	r24, Z
 2e0:	89 23       	and	r24, r25
 2e2:	80 83       	st	Z, r24
    	/* PORT */
		(*(volatile uint8_t *)port_addr) |= (_NM_MASK8(n,m)) ; /*pull-up-enable*/  
 2e4:	8c 91       	ld	r24, X
 2e6:	82 2b       	or	r24, r18
 2e8:	8c 93       	st	X, r24
 2ea:	08 95       	ret
	}else if(OUTPUT == mode){
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	c9 f4       	brne	.+50     	; 0x322 <__set_port_mode+0x7a>
		/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) |= _NM_MASK8(n,m);  /*enable output*/  
 2f0:	fc 01       	movw	r30, r24
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	c9 01       	movw	r24, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <__set_port_mode+0x58>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	4a 95       	dec	r20
 302:	e2 f7       	brpl	.-8      	; 0x2fc <__set_port_mode+0x54>
 304:	ac 01       	movw	r20, r24
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	87 1b       	sub	r24, r23
 30c:	91 09       	sbc	r25, r1
 30e:	02 c0       	rjmp	.+4      	; 0x314 <__set_port_mode+0x6c>
 310:	35 95       	asr	r19
 312:	27 95       	ror	r18
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <__set_port_mode+0x68>
 318:	94 2f       	mov	r25, r20
 31a:	92 23       	and	r25, r18
 31c:	80 81       	ld	r24, Z
 31e:	89 2b       	or	r24, r25
 320:	80 83       	st	Z, r24
 322:	08 95       	ret
