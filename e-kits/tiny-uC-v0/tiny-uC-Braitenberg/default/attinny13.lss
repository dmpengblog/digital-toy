
attinny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000390  2**0
                  ALLOC
  3 .noinit       00000000  00800063  00800063  00000390  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000390  2**0
                  CONTENTS
  5 .stab         00000354  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000064  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000fe  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000843  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000037a  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000049f  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000017f  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ea ef       	ldi	r30, 0xFA	; 250
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	03 c0       	rjmp	.+6      	; 0x2e <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	c8 95       	lpm
  2a:	31 96       	adiw	r30, 0x01	; 1
  2c:	0d 92       	st	X+, r0

0000002e <.do_copy_data_start>:
  2e:	a2 36       	cpi	r26, 0x62	; 98
  30:	b1 07       	cpc	r27, r17
  32:	d1 f7       	brne	.-12     	; 0x28 <.do_copy_data_loop>

00000034 <__do_clear_bss>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a2 e6       	ldi	r26, 0x62	; 98
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a3 36       	cpi	r26, 0x63	; 99
  40:	b1 07       	cpc	r27, r17
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	34 c0       	rjmp	.+104    	; 0xae <main>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <keydown>:


char keydown()
{
	if( ! _test_bit(_inb(PORTB),ucKEY)) {			
  48:	b0 99       	sbic	0x16, 0	; 22
  4a:	09 c0       	rjmp	.+18     	; 0x5e <keydown+0x16>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  4c:	88 e5       	ldi	r24, 0x58	; 88
  4e:	9b e1       	ldi	r25, 0x1B	; 27
  50:	01 97       	sbiw	r24, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <keydown+0x8>
	    	_delay_ms(7); 							
	    	if(! _test_bit(_inb(PORTB),ucKEY ))		
  54:	b0 99       	sbic	0x16, 0	; 22
  56:	03 c0       	rjmp	.+6      	; 0x5e <keydown+0x16>
				return 1;							
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	08 95       	ret
        }											
       return 0	;									
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
}
  62:	08 95       	ret

00000064 <test_motor>:
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	f9 2f       	mov	r31, r25
  6a:	e8 2f       	mov	r30, r24
  6c:	31 97       	sbiw	r30, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <test_motor+0x8>


unsigned char duty=0; 

test_motor(char pwm)
{
	pwm = 80;
	_delay_ms(100);
	pwm=0;
	_delay_ms(100);
	_delay_ms(100);
	
	pwm=50;
	_delay_ms(100);
	pwm = 0;
	_delay_ms(100);
	_delay_ms(100);
	
	pwm = 25;
	_delay_ms(100);
	pwm = 0;
	_delay_ms(100);
	_delay_ms(100);
	
}

int main()
{
  70:	f9 2f       	mov	r31, r25
  72:	e8 2f       	mov	r30, r24
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <test_motor+0x10>
  78:	f9 2f       	mov	r31, r25
  7a:	e8 2f       	mov	r30, r24
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <test_motor+0x18>
  80:	f9 2f       	mov	r31, r25
  82:	e8 2f       	mov	r30, r24
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <test_motor+0x20>
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <test_motor+0x28>
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <test_motor+0x30>
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <test_motor+0x38>
  a0:	f9 2f       	mov	r31, r25
  a2:	e8 2f       	mov	r30, r24
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__stack+0x5>
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__stack+0x9>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	08 95       	ret

000000ae <main>:
  ae:	cf e9       	ldi	r28, 0x9F	; 159
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61
    unsigned int leye,reye = 0;

	DDRB = 0xFF;	/* 定义B口为输出*/
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;	/* 关闭全部LED */
  ba:	18 ba       	out	0x18, r1	; 24

    pwm_init();
  bc:	4c d0       	rcall	.+152    	; 0x156 <pwm_init>
	adc_init();	
  be:	86 d0       	rcall	.+268    	; 0x1cc <adc_init>
    _pin_mode(PORTB,PB2,INPUT);
  c0:	22 e0       	ldi	r18, 0x02	; 2
  c2:	42 2f       	mov	r20, r18
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9e d0       	rcall	.+316    	; 0x208 <__set_port_mode>
	_pin_mode(PORTB,PB3,INPUT);
  cc:	23 e0       	ldi	r18, 0x03	; 3
  ce:	42 2f       	mov	r20, r18
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	98 d0       	rcall	.+304    	; 0x208 <__set_port_mode>

    test_motor(R_MOTOR);
  d8:	89 b5       	in	r24, 0x29	; 41
  da:	c4 df       	rcall	.-120    	; 0x64 <test_motor>
    test_motor(L_MOTOR);
  dc:	86 b7       	in	r24, 0x36	; 54
  de:	c2 df       	rcall	.-124    	; 0x64 <test_motor>

    led_init();
  e0:	47 d0       	rcall	.+142    	; 0x170 <led_init>
	
	while (1){

 	        
	   leye=_adc(LEYE_ADC);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	7c d0       	rcall	.+248    	; 0x1e0 <_adc>
  e8:	d9 2f       	mov	r29, r25
  ea:	c8 2f       	mov	r28, r24
	   reye=_adc(REYE_ADC);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	77 d0       	rcall	.+238    	; 0x1e0 <_adc>
  f2:	48 2f       	mov	r20, r24
  f4:	59 2f       	mov	r21, r25
	   
	    if(leye>800 || reye>800){
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	c1 32       	cpi	r28, 0x21	; 33
  fa:	d8 07       	cpc	r29, r24
  fc:	20 f4       	brcc	.+8      	; 0x106 <main+0x58>
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	41 32       	cpi	r20, 0x21	; 33
 102:	58 07       	cpc	r21, r24
 104:	10 f0       	brcs	.+4      	; 0x10a <main+0x5c>
			ucLED_On();
 106:	c4 9a       	sbi	0x18, 4	; 24
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x5e>
	    }else
		     ucLED_Off();
 10a:	c4 98       	cbi	0x18, 4	; 24
		   
		if(leye<150) 
 10c:	c6 39       	cpi	r28, 0x96	; 150
 10e:	d1 05       	cpc	r29, r1
 110:	10 f4       	brcc	.+4      	; 0x116 <main+0x68>
		  L_MOTOR=0;
 112:	16 be       	out	0x36, r1	; 54
 114:	0d c0       	rjmp	.+26     	; 0x130 <main+0x82>
		else{
		   unsigned char pwm = leye>>2;
 116:	8c 2f       	mov	r24, r28
 118:	9d 2f       	mov	r25, r29
 11a:	96 95       	lsr	r25
 11c:	87 95       	ror	r24
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24

           L_MOTOR = pwm>120?(pwm/3):pwm/2;
 122:	89 37       	cpi	r24, 0x79	; 121
 124:	18 f0       	brcs	.+6      	; 0x12c <main+0x7e>
 126:	63 e0       	ldi	r22, 0x03	; 3
 128:	dc d0       	rcall	.+440    	; 0x2e2 <__udivmodqi4>
 12a:	01 c0       	rjmp	.+2      	; 0x12e <main+0x80>
 12c:	86 95       	lsr	r24
 12e:	86 bf       	out	0x36, r24	; 54
		}

        if(reye<150) R_MOTOR=0;
 130:	46 39       	cpi	r20, 0x96	; 150
 132:	51 05       	cpc	r21, r1
 134:	10 f4       	brcc	.+4      	; 0x13a <main+0x8c>
 136:	19 bc       	out	0x29, r1	; 41
 138:	d4 cf       	rjmp	.-88     	; 0xe2 <main+0x34>
		else{
		   unsigned char pwm = leye>>2;
 13a:	8c 2f       	mov	r24, r28
 13c:	9d 2f       	mov	r25, r29
 13e:	96 95       	lsr	r25
 140:	87 95       	ror	r24
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24

           R_MOTOR = pwm>120?(pwm/3):pwm/2;
 146:	89 37       	cpi	r24, 0x79	; 121
 148:	18 f0       	brcs	.+6      	; 0x150 <main+0xa2>
 14a:	63 e0       	ldi	r22, 0x03	; 3
 14c:	ca d0       	rcall	.+404    	; 0x2e2 <__udivmodqi4>
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0xa4>
 150:	86 95       	lsr	r24
 152:	89 bd       	out	0x29, r24	; 41
 154:	c6 cf       	rjmp	.-116    	; 0xe2 <main+0x34>

00000156 <pwm_init>:


void pwm_init()
{
  TCCR0A  =  ( _bits8(0b11,WGM00,WGM02) ) |  ( _bits8(0b10, COM0B0,COM0B1) |  ( _bits8(0b10, COM0A0,COM0A1) ));  
 156:	83 ea       	ldi	r24, 0xA3	; 163
 158:	8f bd       	out	0x2f, r24	; 47
  TCCR0B  =  _bits8(0b100, CS00,CS02);     
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	83 bf       	out	0x33, r24	; 51
  TCNT0  = 0;
 15e:	12 be       	out	0x32, r1	; 50
  OCR0A = 0 ;  /* duty = 0; */
 160:	16 be       	out	0x36, r1	; 54

  GTCCR = 1; /*reset prescaler*/
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	88 bd       	out	0x28, r24	; 40
 166:	08 95       	ret

00000168 <pwm_setduty>:

}


void pwm_setduty(unsigned char duty)
{
  OCR0B = OCR0A=duty;
 168:	86 bf       	out	0x36, r24	; 54
 16a:	86 b7       	in	r24, 0x36	; 54
 16c:	89 bd       	out	0x29, r24	; 41
 16e:	08 95       	ret

00000170 <led_init>:



void led_init()
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	a0 e2       	ldi	r26, 0x20	; 32
 176:	be e4       	ldi	r27, 0x4E	; 78
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	24 e0       	ldi	r18, 0x04	; 4
	/* 往前步进 */
    char i;
	for (i = 0; i < 5; i++){
        ucLED_On();
 17e:	c4 9a       	sbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 180:	8a 2f       	mov	r24, r26
 182:	9b 2f       	mov	r25, r27
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <led_init+0x14>
		_delay_ms(20);
 	    ucLED_Off();
 188:	c4 98       	cbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18a:	8a 2f       	mov	r24, r26
 18c:	9b 2f       	mov	r25, r27
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <led_init+0x1e>
 192:	21 50       	subi	r18, 0x01	; 1
 194:	27 ff       	sbrs	r18, 7
 196:	f3 cf       	rjmp	.-26     	; 0x17e <led_init+0xe>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <sharp_flash>:
 	    _delay_ms(20);
	}

}	


char mod=2;


void sharp_flash()
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	a0 e1       	ldi	r26, 0x10	; 16
 1a4:	b7 e2       	ldi	r27, 0x27	; 39
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	23 e6       	ldi	r18, 0x63	; 99
    char x;

    for(x=0;x<100;x++){
       ucLED_On();
 1ac:	c4 9a       	sbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ae:	8a 2f       	mov	r24, r26
 1b0:	9b 2f       	mov	r25, r27
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <sharp_flash+0x14>
	   
       _delay_ms(10);
	   ucLED_Off();
 1b6:	c4 98       	cbi	0x18, 4	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b8:	8a 2f       	mov	r24, r26
 1ba:	9b 2f       	mov	r25, r27
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <sharp_flash+0x1e>
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	27 ff       	sbrs	r18, 7
 1c4:	f3 cf       	rjmp	.-26     	; 0x1ac <sharp_flash+0xe>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <adc_init>:
{
	short adc;

	/// 1.1V ref                       ADCL keep low 8bit        init for ch1,PB2, ADC in tiny-uC  
	ADMUX = _bits8(0b1,REFS0,REFS0) |   _bits8(0,ADLAR,ADLAR) |  _bits8(ucADC_CH,MUX0,MUX1);    
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	87 b9       	out	0x07, r24	; 7
        /*must READ ADCH for compled ADC*/

	/*ADC status and control*/   
	         /*enable ADC*/	  /*start first ADC*/    /*no interrupt for now*/ /*9.6M/64, 125kHz*/	    
	ADCSRA = _bits8(1,ADEN,ADEN) | _bits8(1,ADSC,ADSC) |  _bits8(0, ADIE,ADIE)   | _bits8(0b110, ADPS0,ADPS2);
 1d0:	86 ec       	ldi	r24, 0xC6	; 198
 1d2:	86 b9       	out	0x06, r24	; 6
       /*wait for 25 ADC clock for first ADC completed*/
	while(!_test_bit(ADCSRA,ADIF));
 1d4:	34 9b       	sbis	0x06, 4	; 6
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <adc_init+0x8>
	_set_bit(ADCSRA,ADIF); //clear IF bit
 1d8:	34 9a       	sbi	0x06, 4	; 6
  
    adc = ADCL;
 1da:	84 b1       	in	r24, 0x04	; 4
	barrier();
	adc = ADCH;
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	08 95       	ret

000001e0 <_adc>:
}



unsigned int _adc(unsigned char ch)
{
  unsigned int adc_l=0,adc=0;

  /*select channel*/
  _mov_bits8(ADMUX,ch,MUX0,MUX1,0,2); /*ADC0...ADC4*/
 1e0:	98 2f       	mov	r25, r24
 1e2:	97 70       	andi	r25, 0x07	; 7
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	8c 7f       	andi	r24, 0xFC	; 252
 1e8:	98 2b       	or	r25, r24
 1ea:	97 b9       	out	0x07, r25	; 7

  /*start ADC*/
  _set_bit(ADCSRA,ADSC);
 1ec:	36 9a       	sbi	0x06, 6	; 6

  /*wait completed(ADIF active)*/
   while(!_test_bit(ADCSRA,ADIF));
 1ee:	34 9b       	sbis	0x06, 4	; 6
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <_adc+0xe>

  /*read result */
  /*must READ ADCH for compled ADC*/
   adc_l = ADCL;
 1f2:	84 b1       	in	r24, 0x04	; 4
 1f4:	28 2f       	mov	r18, r24
 1f6:	33 27       	eor	r19, r19
   /* GCC will swich ADCL read fist,so tell it don't do that*/
   barrier();
   adc =   ADCH ;
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	99 27       	eor	r25, r25
   adc = (adc<<8)|adc_l;
 1fc:	98 2f       	mov	r25, r24
 1fe:	88 27       	eor	r24, r24

   _set_bit(ADCSRA,ADIF); //clear IF bit
 200:	34 9a       	sbi	0x06, 4	; 6
   return adc;
}
 202:	82 2b       	or	r24, r18
 204:	93 2b       	or	r25, r19
 206:	08 95       	ret

00000208 <__set_port_mode>:
#include "avrio.h"


void __set_port_mode(volatile char* port_addr, char mode, char n, char m)
{
 208:	b9 2f       	mov	r27, r25
 20a:	a8 2f       	mov	r26, r24
 20c:	72 2f       	mov	r23, r18
	if(INPUT == mode){
 20e:	66 23       	and	r22, r22
 210:	09 f5       	brne	.+66     	; 0x254 <__set_port_mode+0x4c>
    	/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) &= ~(_MASK8(n,m));  /*enable input*/  
 212:	f9 2f       	mov	r31, r25
 214:	e8 2f       	mov	r30, r24
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	93 2f       	mov	r25, r19
 21e:	82 2f       	mov	r24, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <__set_port_mode+0x1e>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	4a 95       	dec	r20
 228:	e2 f7       	brpl	.-8      	; 0x222 <__set_port_mode+0x1a>
 22a:	48 2f       	mov	r20, r24
 22c:	59 2f       	mov	r21, r25
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	87 1b       	sub	r24, r23
 234:	91 09       	sbc	r25, r1
 236:	02 c0       	rjmp	.+4      	; 0x23c <__set_port_mode+0x34>
 238:	35 95       	asr	r19
 23a:	27 95       	ror	r18
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <__set_port_mode+0x30>
 240:	24 23       	and	r18, r20
 242:	92 2f       	mov	r25, r18
 244:	90 95       	com	r25
 246:	80 81       	ld	r24, Z
 248:	89 23       	and	r24, r25
 24a:	80 83       	st	Z, r24
    	/* PORT */
		(*(volatile uint8_t *)port_addr) |= (_MASK8(n,m)) ; /*pull-up-enable*/  
 24c:	8c 91       	ld	r24, X
 24e:	82 2b       	or	r24, r18
 250:	8c 93       	st	X, r24
 252:	08 95       	ret
	}else if(OUTPUT == mode){
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	e1 f4       	brne	.+56     	; 0x290 <__set_port_mode+0x88>
		/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) |= _MASK8(n,m);  /*enable output*/  
 258:	f9 2f       	mov	r31, r25
 25a:	e8 2f       	mov	r30, r24
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	93 2f       	mov	r25, r19
 264:	82 2f       	mov	r24, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <__set_port_mode+0x64>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	4a 95       	dec	r20
 26e:	e2 f7       	brpl	.-8      	; 0x268 <__set_port_mode+0x60>
 270:	48 2f       	mov	r20, r24
 272:	59 2f       	mov	r21, r25
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	87 1b       	sub	r24, r23
 27a:	91 09       	sbc	r25, r1
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__set_port_mode+0x7a>
 27e:	35 95       	asr	r19
 280:	27 95       	ror	r18
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <__set_port_mode+0x76>
 286:	94 2f       	mov	r25, r20
 288:	92 23       	and	r25, r18
 28a:	80 81       	ld	r24, Z
 28c:	89 2b       	or	r24, r25
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <_swap8>:
   	}

    //panic();
	//DDRx &= ~(1<< DDx##n);  /*enable input*/   
	//PORTx |= (1<< PX##n)    /*pull-up-enable*/  
}

#if 0
/*0-64 seconds*/
void delay(unsigned long ticks)
{
  
   unsigned long long lt = jiffers;

   while(!timeafter(jiffers,(lt+ ticks)));
   
   return;

}
#endif

/*abcd1234 => 4321dcba */
unsigned char _swap8(unsigned char x)
{
    /*abcd1234 => 1234abcd*/
	x= (x>>4) | (x<<4);
 292:	28 2f       	mov	r18, r24
 294:	22 95       	swap	r18
 296:	2f 70       	andi	r18, 0x0F	; 15
 298:	99 27       	eor	r25, r25
 29a:	e4 e0       	ldi	r30, 0x04	; 4
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	ea 95       	dec	r30
 2a2:	e1 f7       	brne	.-8      	; 0x29c <_swap8+0xa>
 2a4:	28 2b       	or	r18, r24
	/*1234abcd  => 3412cdab*/
    	   /*1200ab00*/         /*003400cd*/
	x= ((x&0b11001100)>>2) | ((x&0b00110011)<<2);
 2a6:	33 27       	eor	r19, r19
 2a8:	93 2f       	mov	r25, r19
 2aa:	82 2f       	mov	r24, r18
 2ac:	8c 7c       	andi	r24, 0xCC	; 204
 2ae:	90 70       	andi	r25, 0x00	; 0
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	23 73       	andi	r18, 0x33	; 51
 2ba:	30 70       	andi	r19, 0x00	; 0
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
                 /*0xcc*/            /*0x33*/
	/*3412cdab => 4321dcba*/
	x= ((x&0b10101010)>>1) | ((x&0b01010101)<<1);
 2c4:	82 2b       	or	r24, r18
 2c6:	93 2b       	or	r25, r19
 2c8:	28 2f       	mov	r18, r24
 2ca:	39 2f       	mov	r19, r25
 2cc:	2a 7a       	andi	r18, 0xAA	; 170
 2ce:	30 70       	andi	r19, 0x00	; 0
 2d0:	35 95       	asr	r19
 2d2:	27 95       	ror	r18
 2d4:	85 75       	andi	r24, 0x55	; 85
 2d6:	90 70       	andi	r25, 0x00	; 0
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
            /*0xAA*/            /*0x55*/
    return x;
}
 2dc:	82 2b       	or	r24, r18
 2de:	93 2b       	or	r25, r19
 2e0:	08 95       	ret

000002e2 <__udivmodqi4>:
 2e2:	99 1b       	sub	r25, r25
 2e4:	79 e0       	ldi	r23, 0x09	; 9
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <__udivmodqi4_ep>

000002e8 <__udivmodqi4_loop>:
 2e8:	99 1f       	adc	r25, r25
 2ea:	96 17       	cp	r25, r22
 2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__udivmodqi4_ep>
 2ee:	96 1b       	sub	r25, r22

000002f0 <__udivmodqi4_ep>:
 2f0:	88 1f       	adc	r24, r24
 2f2:	7a 95       	dec	r23
 2f4:	c9 f7       	brne	.-14     	; 0x2e8 <__udivmodqi4_loop>
 2f6:	80 95       	com	r24
 2f8:	08 95       	ret
